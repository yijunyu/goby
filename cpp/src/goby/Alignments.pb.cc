// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Alignments.proto

#include "Alignments.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Alignments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlignmentEntry_Alignments_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Alignments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmbiguousLocation_Alignments_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Alignments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IdentifierInfo_Alignments_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Alignments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IdentifierMapping_Alignments_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Alignments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadOriginInfo_Alignments_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Alignments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelatedAlignmentEntry_Alignments_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Alignments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SequenceVariation_Alignments_2eproto;
namespace goby {
class AlignmentCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlignmentCollection> _instance;
} _AlignmentCollection_default_instance_;
class AlignmentEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlignmentEntry> _instance;
} _AlignmentEntry_default_instance_;
class RelatedAlignmentEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatedAlignmentEntry> _instance;
} _RelatedAlignmentEntry_default_instance_;
class SequenceVariationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SequenceVariation> _instance;
} _SequenceVariation_default_instance_;
class AlignmentHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlignmentHeader> _instance;
} _AlignmentHeader_default_instance_;
class IdentifierMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IdentifierMapping> _instance;
} _IdentifierMapping_default_instance_;
class IdentifierInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IdentifierInfo> _instance;
} _IdentifierInfo_default_instance_;
class ReadOriginInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadOriginInfo> _instance;
} _ReadOriginInfo_default_instance_;
class AlignmentTooManyHitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlignmentTooManyHits> _instance;
} _AlignmentTooManyHits_default_instance_;
class AmbiguousLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmbiguousLocation> _instance;
} _AmbiguousLocation_default_instance_;
class AlignmentIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlignmentIndex> _instance;
} _AlignmentIndex_default_instance_;
}  // namespace goby
static void InitDefaultsscc_info_AlignmentCollection_Alignments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goby::_AlignmentCollection_default_instance_;
    new (ptr) ::goby::AlignmentCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goby::AlignmentCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlignmentCollection_Alignments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AlignmentCollection_Alignments_2eproto}, {
      &scc_info_AlignmentEntry_Alignments_2eproto.base,}};

static void InitDefaultsscc_info_AlignmentEntry_Alignments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goby::_AlignmentEntry_default_instance_;
    new (ptr) ::goby::AlignmentEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goby::AlignmentEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlignmentEntry_Alignments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AlignmentEntry_Alignments_2eproto}, {
      &scc_info_SequenceVariation_Alignments_2eproto.base,
      &scc_info_RelatedAlignmentEntry_Alignments_2eproto.base,}};

static void InitDefaultsscc_info_AlignmentHeader_Alignments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goby::_AlignmentHeader_default_instance_;
    new (ptr) ::goby::AlignmentHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goby::AlignmentHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlignmentHeader_Alignments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AlignmentHeader_Alignments_2eproto}, {
      &scc_info_IdentifierMapping_Alignments_2eproto.base,
      &scc_info_ReadOriginInfo_Alignments_2eproto.base,}};

static void InitDefaultsscc_info_AlignmentIndex_Alignments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goby::_AlignmentIndex_default_instance_;
    new (ptr) ::goby::AlignmentIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goby::AlignmentIndex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlignmentIndex_Alignments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AlignmentIndex_Alignments_2eproto}, {}};

static void InitDefaultsscc_info_AlignmentTooManyHits_Alignments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goby::_AlignmentTooManyHits_default_instance_;
    new (ptr) ::goby::AlignmentTooManyHits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goby::AlignmentTooManyHits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlignmentTooManyHits_Alignments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AlignmentTooManyHits_Alignments_2eproto}, {
      &scc_info_AmbiguousLocation_Alignments_2eproto.base,}};

static void InitDefaultsscc_info_AmbiguousLocation_Alignments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goby::_AmbiguousLocation_default_instance_;
    new (ptr) ::goby::AmbiguousLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goby::AmbiguousLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmbiguousLocation_Alignments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AmbiguousLocation_Alignments_2eproto}, {}};

static void InitDefaultsscc_info_IdentifierInfo_Alignments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goby::_IdentifierInfo_default_instance_;
    new (ptr) ::goby::IdentifierInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goby::IdentifierInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IdentifierInfo_Alignments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IdentifierInfo_Alignments_2eproto}, {}};

static void InitDefaultsscc_info_IdentifierMapping_Alignments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goby::_IdentifierMapping_default_instance_;
    new (ptr) ::goby::IdentifierMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goby::IdentifierMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IdentifierMapping_Alignments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IdentifierMapping_Alignments_2eproto}, {
      &scc_info_IdentifierInfo_Alignments_2eproto.base,}};

static void InitDefaultsscc_info_ReadOriginInfo_Alignments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goby::_ReadOriginInfo_default_instance_;
    new (ptr) ::goby::ReadOriginInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goby::ReadOriginInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadOriginInfo_Alignments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReadOriginInfo_Alignments_2eproto}, {}};

static void InitDefaultsscc_info_RelatedAlignmentEntry_Alignments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goby::_RelatedAlignmentEntry_default_instance_;
    new (ptr) ::goby::RelatedAlignmentEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goby::RelatedAlignmentEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelatedAlignmentEntry_Alignments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RelatedAlignmentEntry_Alignments_2eproto}, {}};

static void InitDefaultsscc_info_SequenceVariation_Alignments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::goby::_SequenceVariation_default_instance_;
    new (ptr) ::goby::SequenceVariation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::goby::SequenceVariation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SequenceVariation_Alignments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SequenceVariation_Alignments_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Alignments_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Alignments_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Alignments_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Alignments_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentCollection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentCollection, alignment_entries_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, multiplicity_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, query_index_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, target_index_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, position_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, matching_reverse_strand_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, query_position_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, score_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, number_of_mismatches_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, number_of_indels_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, query_aligned_length_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, target_aligned_length_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, sequence_variations_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, query_length_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, mapping_quality_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, pair_flags_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, pair_alignment_link_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, fragment_index_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, spliced_forward_alignment_link_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, spliced_backward_alignment_link_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, spliced_flags_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, insert_size_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, sample_index_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, query_index_occurrences_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, ambiguity_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, bam_attributes_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, read_quality_scores_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, read_origin_index_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, softclippedbasesleft_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, softclippedbasesright_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, softclippedqualityleft_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, softclippedqualityright_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, placedunmappedsequence_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, placedunmappedquality_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentEntry, readname_),
  17,
  11,
  12,
  13,
  16,
  15,
  14,
  18,
  19,
  21,
  22,
  ~0u,
  20,
  23,
  24,
  8,
  25,
  9,
  10,
  26,
  27,
  28,
  29,
  31,
  ~0u,
  7,
  30,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::goby::RelatedAlignmentEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::goby::RelatedAlignmentEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goby::RelatedAlignmentEntry, target_index_),
  PROTOBUF_FIELD_OFFSET(::goby::RelatedAlignmentEntry, position_),
  PROTOBUF_FIELD_OFFSET(::goby::RelatedAlignmentEntry, fragment_index_),
  PROTOBUF_FIELD_OFFSET(::goby::RelatedAlignmentEntry, optimized_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::goby::SequenceVariation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::goby::SequenceVariation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goby::SequenceVariation, from_),
  PROTOBUF_FIELD_OFFSET(::goby::SequenceVariation, to_),
  PROTOBUF_FIELD_OFFSET(::goby::SequenceVariation, position_),
  PROTOBUF_FIELD_OFFSET(::goby::SequenceVariation, read_index_),
  PROTOBUF_FIELD_OFFSET(::goby::SequenceVariation, to_quality_),
  1,
  0,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, smallest_split_query_index_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, largest_split_query_index_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, query_name_mapping_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, target_name_mapping_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, number_of_queries_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, number_of_targets_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, number_of_aligned_reads_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, query_length_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, constant_query_length_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, target_length_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, sorted_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, indexed_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, query_lengths_stored_in_entries_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, aligner_name_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, aligner_version_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, version_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, sample_basename_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, query_indices_were_permuted_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, query_index_occurrences_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, ambiguity_stored_in_entries_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, all_read_quality_scores_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentHeader, read_origin_),
  8,
  10,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  9,
  ~0u,
  11,
  12,
  13,
  0,
  1,
  2,
  ~0u,
  14,
  15,
  16,
  17,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::goby::IdentifierMapping, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::goby::IdentifierMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goby::IdentifierMapping, mappings_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::goby::IdentifierInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::goby::IdentifierInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goby::IdentifierInfo, name_),
  PROTOBUF_FIELD_OFFSET(::goby::IdentifierInfo, index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::goby::ReadOriginInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::goby::ReadOriginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goby::ReadOriginInfo, origin_index_),
  PROTOBUF_FIELD_OFFSET(::goby::ReadOriginInfo, origin_id_),
  PROTOBUF_FIELD_OFFSET(::goby::ReadOriginInfo, sample_),
  PROTOBUF_FIELD_OFFSET(::goby::ReadOriginInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::goby::ReadOriginInfo, library_),
  PROTOBUF_FIELD_OFFSET(::goby::ReadOriginInfo, platform_unit_),
  PROTOBUF_FIELD_OFFSET(::goby::ReadOriginInfo, run_date_),
  6,
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentTooManyHits, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentTooManyHits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentTooManyHits, aligner_threshold_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentTooManyHits, hits_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::goby::AmbiguousLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::goby::AmbiguousLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goby::AmbiguousLocation, query_index_),
  PROTOBUF_FIELD_OFFSET(::goby::AmbiguousLocation, at_least_number_of_hits_),
  PROTOBUF_FIELD_OFFSET(::goby::AmbiguousLocation, length_of_match_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentIndex, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentIndex, target_position_offsets_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentIndex, offsets_),
  PROTOBUF_FIELD_OFFSET(::goby::AlignmentIndex, absolute_positions_),
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::goby::AlignmentCollection)},
  { 7, 46, sizeof(::goby::AlignmentEntry)},
  { 80, 89, sizeof(::goby::RelatedAlignmentEntry)},
  { 93, 103, sizeof(::goby::SequenceVariation)},
  { 108, 135, sizeof(::goby::AlignmentHeader)},
  { 157, 163, sizeof(::goby::IdentifierMapping)},
  { 164, 171, sizeof(::goby::IdentifierInfo)},
  { 173, 185, sizeof(::goby::ReadOriginInfo)},
  { 192, 199, sizeof(::goby::AlignmentTooManyHits)},
  { 201, 209, sizeof(::goby::AmbiguousLocation)},
  { 212, 220, sizeof(::goby::AlignmentIndex)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goby::_AlignmentCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goby::_AlignmentEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goby::_RelatedAlignmentEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goby::_SequenceVariation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goby::_AlignmentHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goby::_IdentifierMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goby::_IdentifierInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goby::_ReadOriginInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goby::_AlignmentTooManyHits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goby::_AmbiguousLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::goby::_AlignmentIndex_default_instance_),
};

const char descriptor_table_protodef_Alignments_2eproto[] =
  "\n\020Alignments.proto\022\004goby\"F\n\023AlignmentCol"
  "lection\022/\n\021alignment_entries\030\001 \003(\0132\024.gob"
  "y.AlignmentEntry\"\213\010\n\016AlignmentEntry\022\024\n\014m"
  "ultiplicity\030\007 \001(\r\022\023\n\013query_index\030\001 \001(\r\022\024"
  "\n\014target_index\030\002 \001(\r\022\020\n\010position\030\003 \001(\r\022\037"
  "\n\027matching_reverse_strand\030\006 \001(\010\022\026\n\016query"
  "_position\030\005 \001(\r\022\r\n\005score\030\004 \001(\002\022\034\n\024number"
  "_of_mismatches\030\010 \001(\r\022\030\n\020number_of_indels"
  "\030\t \001(\r\022\034\n\024query_aligned_length\030\013 \001(\r\022\035\n\025"
  "target_aligned_length\030\014 \001(\r\0224\n\023sequence_"
  "variations\030\r \003(\0132\027.goby.SequenceVariatio"
  "n\022\024\n\014query_length\030\n \001(\r\022\027\n\017mapping_quali"
  "ty\030\016 \001(\005\022\022\n\npair_flags\030\017 \001(\r\0228\n\023pair_ali"
  "gnment_link\030\020 \001(\0132\033.goby.RelatedAlignmen"
  "tEntry\022\026\n\016fragment_index\030\021 \001(\r\022C\n\036splice"
  "d_forward_alignment_link\030\022 \001(\0132\033.goby.Re"
  "latedAlignmentEntry\022D\n\037spliced_backward_"
  "alignment_link\030\026 \001(\0132\033.goby.RelatedAlign"
  "mentEntry\022\025\n\rspliced_flags\030\023 \001(\r\022\023\n\013inse"
  "rt_size\030\024 \001(\021\022\024\n\014sample_index\030\025 \001(\r\022\037\n\027q"
  "uery_index_occurrences\030\031 \001(\r\022\021\n\tambiguit"
  "y\030\033 \001(\r\022\026\n\016bam_attributes\0302 \003(\t\022\033\n\023read_"
  "quality_scores\0307 \001(\014\022\031\n\021read_origin_inde"
  "x\030\032 \001(\r\022\034\n\024softClippedBasesLeft\030\036 \001(\t\022\035\n"
  "\025softClippedBasesRight\030\037 \001(\t\022\036\n\026softClip"
  "pedQualityLeft\030  \001(\014\022\037\n\027softClippedQuali"
  "tyRight\030! \001(\014\022\036\n\026placedUnmappedSequence\030"
  "( \001(\t\022\035\n\025placedUnmappedQuality\030) \001(\014\022\020\n\010"
  "readName\030* \001(\t\"p\n\025RelatedAlignmentEntry\022"
  "\024\n\014target_index\030\001 \001(\r\022\020\n\010position\030\002 \001(\r\022"
  "\026\n\016fragment_index\030\003 \001(\r\022\027\n\017optimized_ind"
  "ex\0302 \001(\r\"g\n\021SequenceVariation\022\014\n\004from\030\002 "
  "\001(\t\022\n\n\002to\030\001 \001(\t\022\020\n\010position\030\003 \001(\r\022\022\n\nrea"
  "d_index\030\005 \001(\r\022\022\n\nto_quality\030\004 \001(\014\"\304\005\n\017Al"
  "ignmentHeader\022\"\n\032smallest_split_query_in"
  "dex\030\t \001(\r\022!\n\031largest_split_query_index\030\013"
  " \001(\r\0223\n\022query_name_mapping\030\001 \001(\0132\027.goby."
  "IdentifierMapping\0224\n\023target_name_mapping"
  "\030\002 \001(\0132\027.goby.IdentifierMapping\022\031\n\021numbe"
  "r_of_queries\030\005 \001(\r\022\031\n\021number_of_targets\030"
  "\006 \001(\r\022\037\n\027number_of_aligned_reads\030\007 \001(\r\022\030"
  "\n\014query_length\030\003 \003(\rB\002\030\001\022\035\n\025constant_que"
  "ry_length\030\n \001(\r\022\025\n\rtarget_length\030\010 \003(\r\022\016"
  "\n\006sorted\030\r \001(\010\022\017\n\007indexed\030\016 \001(\010\022\'\n\037query"
  "_lengths_stored_in_entries\030\017 \001(\010\022\024\n\014alig"
  "ner_name\030\021 \001(\t\022\027\n\017aligner_version\030\022 \001(\t\022"
  "\017\n\007version\030\031 \001(\t\022\027\n\017sample_basename\030\036 \003("
  "\t\022#\n\033query_indices_were_permuted\030\032 \001(\010\022\037"
  "\n\027query_index_occurrences\030# \001(\010\022#\n\033ambig"
  "uity_stored_in_entries\030$ \001(\010\022\037\n\027all_read"
  "_quality_scores\030( \001(\010\022)\n\013read_origin\030\033 \003"
  "(\0132\024.goby.ReadOriginInfo\";\n\021IdentifierMa"
  "pping\022&\n\010mappings\030\001 \003(\0132\024.goby.Identifie"
  "rInfo\"-\n\016IdentifierInfo\022\014\n\004name\030\001 \002(\t\022\r\n"
  "\005index\030\002 \002(\r\"\225\001\n\016ReadOriginInfo\022\024\n\014origi"
  "n_index\030\001 \002(\r\022\021\n\torigin_id\030\002 \002(\t\022\016\n\006samp"
  "le\030\004 \001(\t\022\020\n\010platform\030\005 \001(\t\022\017\n\007library\030\010 "
  "\001(\t\022\025\n\rplatform_unit\030\014 \001(\t\022\020\n\010run_date\030\006"
  " \001(\t\"X\n\024AlignmentTooManyHits\022\031\n\021aligner_"
  "threshold\030\002 \002(\r\022%\n\004hits\030\001 \003(\0132\027.goby.Amb"
  "iguousLocation\"b\n\021AmbiguousLocation\022\023\n\013q"
  "uery_index\030\001 \002(\r\022\037\n\027at_least_number_of_h"
  "its\030\002 \002(\r\022\027\n\017length_of_match\030\003 \001(\r\"j\n\016Al"
  "ignmentIndex\022#\n\027target_position_offsets\030"
  "\001 \003(\rB\002\020\001\022\023\n\007offsets\030\002 \003(\004B\002\020\001\022\036\n\022absolu"
  "te_positions\030\003 \003(\004B\002\020\001B\'\n#edu.cornell.me"
  "d.icb.goby.alignmentsH\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Alignments_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Alignments_2eproto_sccs[11] = {
  &scc_info_AlignmentCollection_Alignments_2eproto.base,
  &scc_info_AlignmentEntry_Alignments_2eproto.base,
  &scc_info_AlignmentHeader_Alignments_2eproto.base,
  &scc_info_AlignmentIndex_Alignments_2eproto.base,
  &scc_info_AlignmentTooManyHits_Alignments_2eproto.base,
  &scc_info_AmbiguousLocation_Alignments_2eproto.base,
  &scc_info_IdentifierInfo_Alignments_2eproto.base,
  &scc_info_IdentifierMapping_Alignments_2eproto.base,
  &scc_info_ReadOriginInfo_Alignments_2eproto.base,
  &scc_info_RelatedAlignmentEntry_Alignments_2eproto.base,
  &scc_info_SequenceVariation_Alignments_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Alignments_2eproto_once;
static bool descriptor_table_Alignments_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Alignments_2eproto = {
  &descriptor_table_Alignments_2eproto_initialized, descriptor_table_protodef_Alignments_2eproto, "Alignments.proto", 2663,
  &descriptor_table_Alignments_2eproto_once, descriptor_table_Alignments_2eproto_sccs, descriptor_table_Alignments_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_Alignments_2eproto::offsets,
  file_level_metadata_Alignments_2eproto, 11, file_level_enum_descriptors_Alignments_2eproto, file_level_service_descriptors_Alignments_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Alignments_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Alignments_2eproto), true);
namespace goby {

// ===================================================================

void AlignmentCollection::InitAsDefaultInstance() {
}
class AlignmentCollection::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<AlignmentCollection>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlignmentCollection::kAlignmentEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlignmentCollection::AlignmentCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goby.AlignmentCollection)
}
AlignmentCollection::AlignmentCollection(const AlignmentCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      alignment_entries_(from.alignment_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:goby.AlignmentCollection)
}

void AlignmentCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlignmentCollection_Alignments_2eproto.base);
}

AlignmentCollection::~AlignmentCollection() {
  // @@protoc_insertion_point(destructor:goby.AlignmentCollection)
  SharedDtor();
}

void AlignmentCollection::SharedDtor() {
}

void AlignmentCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlignmentCollection& AlignmentCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlignmentCollection_Alignments_2eproto.base);
  return *internal_default_instance();
}


void AlignmentCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:goby.AlignmentCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alignment_entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlignmentCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .goby.AlignmentEntry alignment_entries = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_alignment_entries(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 10) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlignmentCollection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:goby.AlignmentCollection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .goby.AlignmentEntry alignment_entries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_alignment_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goby.AlignmentCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goby.AlignmentCollection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlignmentCollection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goby.AlignmentCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goby.AlignmentEntry alignment_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alignment_entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->alignment_entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:goby.AlignmentCollection)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlignmentCollection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:goby.AlignmentCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goby.AlignmentEntry alignment_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alignment_entries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->alignment_entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goby.AlignmentCollection)
  return target;
}

size_t AlignmentCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goby.AlignmentCollection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .goby.AlignmentEntry alignment_entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->alignment_entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->alignment_entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlignmentCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goby.AlignmentCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const AlignmentCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlignmentCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goby.AlignmentCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goby.AlignmentCollection)
    MergeFrom(*source);
  }
}

void AlignmentCollection::MergeFrom(const AlignmentCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goby.AlignmentCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alignment_entries_.MergeFrom(from.alignment_entries_);
}

void AlignmentCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goby.AlignmentCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlignmentCollection::CopyFrom(const AlignmentCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goby.AlignmentCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlignmentCollection::IsInitialized() const {
  return true;
}

void AlignmentCollection::Swap(AlignmentCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlignmentCollection::InternalSwap(AlignmentCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&alignment_entries_)->InternalSwap(CastToBase(&other->alignment_entries_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlignmentCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlignmentEntry::InitAsDefaultInstance() {
  ::goby::_AlignmentEntry_default_instance_._instance.get_mutable()->pair_alignment_link_ = const_cast< ::goby::RelatedAlignmentEntry*>(
      ::goby::RelatedAlignmentEntry::internal_default_instance());
  ::goby::_AlignmentEntry_default_instance_._instance.get_mutable()->spliced_forward_alignment_link_ = const_cast< ::goby::RelatedAlignmentEntry*>(
      ::goby::RelatedAlignmentEntry::internal_default_instance());
  ::goby::_AlignmentEntry_default_instance_._instance.get_mutable()->spliced_backward_alignment_link_ = const_cast< ::goby::RelatedAlignmentEntry*>(
      ::goby::RelatedAlignmentEntry::internal_default_instance());
}
class AlignmentEntry::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<AlignmentEntry>()._has_bits_);
  static void set_has_multiplicity(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_query_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_target_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_matching_reverse_strand(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_query_position(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_number_of_mismatches(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_number_of_indels(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_query_aligned_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_target_aligned_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_query_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_mapping_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_pair_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::goby::RelatedAlignmentEntry& pair_alignment_link(const AlignmentEntry* msg);
  static void set_has_pair_alignment_link(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fragment_index(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::goby::RelatedAlignmentEntry& spliced_forward_alignment_link(const AlignmentEntry* msg);
  static void set_has_spliced_forward_alignment_link(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::goby::RelatedAlignmentEntry& spliced_backward_alignment_link(const AlignmentEntry* msg);
  static void set_has_spliced_backward_alignment_link(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_spliced_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_insert_size(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_sample_index(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_query_index_occurrences(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_ambiguity(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_read_quality_scores(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_read_origin_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_softclippedbasesleft(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_softclippedbasesright(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_softclippedqualityleft(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_softclippedqualityright(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_placedunmappedsequence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_placedunmappedquality(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_readname(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::goby::RelatedAlignmentEntry&
AlignmentEntry::HasBitSetters::pair_alignment_link(const AlignmentEntry* msg) {
  return *msg->pair_alignment_link_;
}
const ::goby::RelatedAlignmentEntry&
AlignmentEntry::HasBitSetters::spliced_forward_alignment_link(const AlignmentEntry* msg) {
  return *msg->spliced_forward_alignment_link_;
}
const ::goby::RelatedAlignmentEntry&
AlignmentEntry::HasBitSetters::spliced_backward_alignment_link(const AlignmentEntry* msg) {
  return *msg->spliced_backward_alignment_link_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlignmentEntry::kMultiplicityFieldNumber;
const int AlignmentEntry::kQueryIndexFieldNumber;
const int AlignmentEntry::kTargetIndexFieldNumber;
const int AlignmentEntry::kPositionFieldNumber;
const int AlignmentEntry::kMatchingReverseStrandFieldNumber;
const int AlignmentEntry::kQueryPositionFieldNumber;
const int AlignmentEntry::kScoreFieldNumber;
const int AlignmentEntry::kNumberOfMismatchesFieldNumber;
const int AlignmentEntry::kNumberOfIndelsFieldNumber;
const int AlignmentEntry::kQueryAlignedLengthFieldNumber;
const int AlignmentEntry::kTargetAlignedLengthFieldNumber;
const int AlignmentEntry::kSequenceVariationsFieldNumber;
const int AlignmentEntry::kQueryLengthFieldNumber;
const int AlignmentEntry::kMappingQualityFieldNumber;
const int AlignmentEntry::kPairFlagsFieldNumber;
const int AlignmentEntry::kPairAlignmentLinkFieldNumber;
const int AlignmentEntry::kFragmentIndexFieldNumber;
const int AlignmentEntry::kSplicedForwardAlignmentLinkFieldNumber;
const int AlignmentEntry::kSplicedBackwardAlignmentLinkFieldNumber;
const int AlignmentEntry::kSplicedFlagsFieldNumber;
const int AlignmentEntry::kInsertSizeFieldNumber;
const int AlignmentEntry::kSampleIndexFieldNumber;
const int AlignmentEntry::kQueryIndexOccurrencesFieldNumber;
const int AlignmentEntry::kAmbiguityFieldNumber;
const int AlignmentEntry::kBamAttributesFieldNumber;
const int AlignmentEntry::kReadQualityScoresFieldNumber;
const int AlignmentEntry::kReadOriginIndexFieldNumber;
const int AlignmentEntry::kSoftClippedBasesLeftFieldNumber;
const int AlignmentEntry::kSoftClippedBasesRightFieldNumber;
const int AlignmentEntry::kSoftClippedQualityLeftFieldNumber;
const int AlignmentEntry::kSoftClippedQualityRightFieldNumber;
const int AlignmentEntry::kPlacedUnmappedSequenceFieldNumber;
const int AlignmentEntry::kPlacedUnmappedQualityFieldNumber;
const int AlignmentEntry::kReadNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlignmentEntry::AlignmentEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goby.AlignmentEntry)
}
AlignmentEntry::AlignmentEntry(const AlignmentEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sequence_variations_(from.sequence_variations_),
      bam_attributes_(from.bam_attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  softclippedbasesleft_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_softclippedbasesleft()) {
    softclippedbasesleft_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.softclippedbasesleft_);
  }
  softclippedbasesright_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_softclippedbasesright()) {
    softclippedbasesright_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.softclippedbasesright_);
  }
  softclippedqualityleft_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_softclippedqualityleft()) {
    softclippedqualityleft_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.softclippedqualityleft_);
  }
  softclippedqualityright_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_softclippedqualityright()) {
    softclippedqualityright_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.softclippedqualityright_);
  }
  placedunmappedsequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_placedunmappedsequence()) {
    placedunmappedsequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.placedunmappedsequence_);
  }
  placedunmappedquality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_placedunmappedquality()) {
    placedunmappedquality_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.placedunmappedquality_);
  }
  readname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_readname()) {
    readname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.readname_);
  }
  read_quality_scores_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_read_quality_scores()) {
    read_quality_scores_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.read_quality_scores_);
  }
  if (from.has_pair_alignment_link()) {
    pair_alignment_link_ = new ::goby::RelatedAlignmentEntry(*from.pair_alignment_link_);
  } else {
    pair_alignment_link_ = nullptr;
  }
  if (from.has_spliced_forward_alignment_link()) {
    spliced_forward_alignment_link_ = new ::goby::RelatedAlignmentEntry(*from.spliced_forward_alignment_link_);
  } else {
    spliced_forward_alignment_link_ = nullptr;
  }
  if (from.has_spliced_backward_alignment_link()) {
    spliced_backward_alignment_link_ = new ::goby::RelatedAlignmentEntry(*from.spliced_backward_alignment_link_);
  } else {
    spliced_backward_alignment_link_ = nullptr;
  }
  ::memcpy(&query_index_, &from.query_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&ambiguity_) -
    reinterpret_cast<char*>(&query_index_)) + sizeof(ambiguity_));
  // @@protoc_insertion_point(copy_constructor:goby.AlignmentEntry)
}

void AlignmentEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlignmentEntry_Alignments_2eproto.base);
  softclippedbasesleft_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  softclippedbasesright_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  softclippedqualityleft_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  softclippedqualityright_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placedunmappedsequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placedunmappedquality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  readname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_quality_scores_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pair_alignment_link_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ambiguity_) -
      reinterpret_cast<char*>(&pair_alignment_link_)) + sizeof(ambiguity_));
}

AlignmentEntry::~AlignmentEntry() {
  // @@protoc_insertion_point(destructor:goby.AlignmentEntry)
  SharedDtor();
}

void AlignmentEntry::SharedDtor() {
  softclippedbasesleft_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  softclippedbasesright_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  softclippedqualityleft_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  softclippedqualityright_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placedunmappedsequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placedunmappedquality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  readname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_quality_scores_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pair_alignment_link_;
  if (this != internal_default_instance()) delete spliced_forward_alignment_link_;
  if (this != internal_default_instance()) delete spliced_backward_alignment_link_;
}

void AlignmentEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlignmentEntry& AlignmentEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlignmentEntry_Alignments_2eproto.base);
  return *internal_default_instance();
}


void AlignmentEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:goby.AlignmentEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_variations_.Clear();
  bam_attributes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      softclippedbasesleft_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      softclippedbasesright_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      softclippedqualityleft_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      softclippedqualityright_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      placedunmappedsequence_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      placedunmappedquality_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      readname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      read_quality_scores_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(pair_alignment_link_ != nullptr);
      pair_alignment_link_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(spliced_forward_alignment_link_ != nullptr);
      spliced_forward_alignment_link_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(spliced_backward_alignment_link_ != nullptr);
      spliced_backward_alignment_link_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&query_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_position_) -
        reinterpret_cast<char*>(&query_index_)) + sizeof(query_position_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&matching_reverse_strand_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mapping_quality_) -
        reinterpret_cast<char*>(&matching_reverse_strand_)) + sizeof(mapping_quality_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&pair_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ambiguity_) -
        reinterpret_cast<char*>(&pair_flags_)) + sizeof(ambiguity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlignmentEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 query_index = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        HasBitSetters::set_has_query_index(&has_bits);
        query_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 target_index = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        HasBitSetters::set_has_target_index(&has_bits);
        target_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 position = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        HasBitSetters::set_has_position(&has_bits);
        position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional float score = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 37) goto handle_unusual;
        HasBitSetters::set_has_score(&has_bits);
        score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
        ptr += sizeof(float);
        break;
      }
      // optional uint32 query_position = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        HasBitSetters::set_has_query_position(&has_bits);
        query_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional bool matching_reverse_strand = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        HasBitSetters::set_has_matching_reverse_strand(&has_bits);
        matching_reverse_strand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 multiplicity = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 56) goto handle_unusual;
        HasBitSetters::set_has_multiplicity(&has_bits);
        multiplicity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 number_of_mismatches = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 64) goto handle_unusual;
        HasBitSetters::set_has_number_of_mismatches(&has_bits);
        number_of_mismatches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 number_of_indels = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        HasBitSetters::set_has_number_of_indels(&has_bits);
        number_of_indels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 query_length = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 80) goto handle_unusual;
        HasBitSetters::set_has_query_length(&has_bits);
        query_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 query_aligned_length = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 88) goto handle_unusual;
        HasBitSetters::set_has_query_aligned_length(&has_bits);
        query_aligned_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 target_aligned_length = 12;
      case 12: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 96) goto handle_unusual;
        HasBitSetters::set_has_target_aligned_length(&has_bits);
        target_aligned_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // repeated .goby.SequenceVariation sequence_variations = 13;
      case 13: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 106) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_sequence_variations(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 106) break;
          ptr += 1;
        }
        break;
      }
      // optional int32 mapping_quality = 14;
      case 14: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 112) goto handle_unusual;
        HasBitSetters::set_has_mapping_quality(&has_bits);
        mapping_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 pair_flags = 15;
      case 15: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 120) goto handle_unusual;
        HasBitSetters::set_has_pair_flags(&has_bits);
        pair_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional .goby.RelatedAlignmentEntry pair_alignment_link = 16;
      case 16: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 130) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_pair_alignment_link(), ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 fragment_index = 17;
      case 17: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 136) goto handle_unusual;
        HasBitSetters::set_has_fragment_index(&has_bits);
        fragment_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional .goby.RelatedAlignmentEntry spliced_forward_alignment_link = 18;
      case 18: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 146) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_spliced_forward_alignment_link(), ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 spliced_flags = 19;
      case 19: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 152) goto handle_unusual;
        HasBitSetters::set_has_spliced_flags(&has_bits);
        spliced_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional sint32 insert_size = 20;
      case 20: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 160) goto handle_unusual;
        HasBitSetters::set_has_insert_size(&has_bits);
        insert_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 sample_index = 21;
      case 21: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 168) goto handle_unusual;
        HasBitSetters::set_has_sample_index(&has_bits);
        sample_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional .goby.RelatedAlignmentEntry spliced_backward_alignment_link = 22;
      case 22: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 178) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_spliced_backward_alignment_link(), ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 query_index_occurrences = 25;
      case 25: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 200) goto handle_unusual;
        HasBitSetters::set_has_query_index_occurrences(&has_bits);
        query_index_occurrences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 read_origin_index = 26;
      case 26: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 208) goto handle_unusual;
        HasBitSetters::set_has_read_origin_index(&has_bits);
        read_origin_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 ambiguity = 27;
      case 27: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 216) goto handle_unusual;
        HasBitSetters::set_has_ambiguity(&has_bits);
        ambiguity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional string softClippedBasesLeft = 30;
      case 30: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 242) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_softclippedbasesleft(), ptr, ctx, "goby.AlignmentEntry.softClippedBasesLeft");
        CHK_(ptr);
        break;
      }
      // optional string softClippedBasesRight = 31;
      case 31: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 250) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_softclippedbasesright(), ptr, ctx, "goby.AlignmentEntry.softClippedBasesRight");
        CHK_(ptr);
        break;
      }
      // optional bytes softClippedQualityLeft = 32;
      case 32: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_softclippedqualityleft(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // optional bytes softClippedQualityRight = 33;
      case 33: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_softclippedqualityright(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // optional string placedUnmappedSequence = 40;
      case 40: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_placedunmappedsequence(), ptr, ctx, "goby.AlignmentEntry.placedUnmappedSequence");
        CHK_(ptr);
        break;
      }
      // optional bytes placedUnmappedQuality = 41;
      case 41: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_placedunmappedquality(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // optional string readName = 42;
      case 42: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_readname(), ptr, ctx, "goby.AlignmentEntry.readName");
        CHK_(ptr);
        break;
      }
      // repeated string bam_attributes = 50;
      case 50: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 146) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_bam_attributes(), ptr, ctx, "goby.AlignmentEntry.bam_attributes");
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) != 914) break;
          ptr += 2;
        }
        break;
      }
      // optional bytes read_quality_scores = 55;
      case 55: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_read_quality_scores(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlignmentEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:goby.AlignmentEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 query_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_query_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_target_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query_position = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_query_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool matching_reverse_strand = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_matching_reverse_strand(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matching_reverse_strand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 multiplicity = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_multiplicity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiplicity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_mismatches = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_number_of_mismatches(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_mismatches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_indels = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_number_of_indels(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_indels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query_length = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_query_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query_aligned_length = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_query_aligned_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_aligned_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_aligned_length = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_target_aligned_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_aligned_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goby.SequenceVariation sequence_variations = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sequence_variations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mapping_quality = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_mapping_quality(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapping_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pair_flags = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_pair_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pair_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .goby.RelatedAlignmentEntry pair_alignment_link = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pair_alignment_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fragment_index = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_fragment_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fragment_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .goby.RelatedAlignmentEntry spliced_forward_alignment_link = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_spliced_forward_alignment_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spliced_flags = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_spliced_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spliced_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 insert_size = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_insert_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &insert_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sample_index = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_sample_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .goby.RelatedAlignmentEntry spliced_backward_alignment_link = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_spliced_backward_alignment_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query_index_occurrences = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_query_index_occurrences(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_index_occurrences_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 read_origin_index = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_read_origin_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &read_origin_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ambiguity = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_ambiguity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ambiguity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string softClippedBasesLeft = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_softclippedbasesleft()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->softclippedbasesleft().data(), static_cast<int>(this->softclippedbasesleft().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.AlignmentEntry.softClippedBasesLeft");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string softClippedBasesRight = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_softclippedbasesright()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->softclippedbasesright().data(), static_cast<int>(this->softclippedbasesright().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.AlignmentEntry.softClippedBasesRight");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes softClippedQualityLeft = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_softclippedqualityleft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes softClippedQualityRight = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_softclippedqualityright()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string placedUnmappedSequence = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_placedunmappedsequence()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->placedunmappedsequence().data(), static_cast<int>(this->placedunmappedsequence().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.AlignmentEntry.placedUnmappedSequence");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes placedUnmappedQuality = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_placedunmappedquality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string readName = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_readname()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->readname().data(), static_cast<int>(this->readname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.AlignmentEntry.readName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string bam_attributes = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_bam_attributes()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bam_attributes(this->bam_attributes_size() - 1).data(),
            static_cast<int>(this->bam_attributes(this->bam_attributes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.AlignmentEntry.bam_attributes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes read_quality_scores = 55;
      case 55: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (442 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_read_quality_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goby.AlignmentEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goby.AlignmentEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlignmentEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goby.AlignmentEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 query_index = 1;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->query_index(), output);
  }

  // optional uint32 target_index = 2;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->target_index(), output);
  }

  // optional uint32 position = 3;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  // optional float score = 4;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->score(), output);
  }

  // optional uint32 query_position = 5;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->query_position(), output);
  }

  // optional bool matching_reverse_strand = 6;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->matching_reverse_strand(), output);
  }

  // optional uint32 multiplicity = 7;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->multiplicity(), output);
  }

  // optional uint32 number_of_mismatches = 8;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->number_of_mismatches(), output);
  }

  // optional uint32 number_of_indels = 9;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->number_of_indels(), output);
  }

  // optional uint32 query_length = 10;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->query_length(), output);
  }

  // optional uint32 query_aligned_length = 11;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->query_aligned_length(), output);
  }

  // optional uint32 target_aligned_length = 12;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->target_aligned_length(), output);
  }

  // repeated .goby.SequenceVariation sequence_variations = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_variations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->sequence_variations(static_cast<int>(i)),
      output);
  }

  // optional int32 mapping_quality = 14;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->mapping_quality(), output);
  }

  // optional uint32 pair_flags = 15;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->pair_flags(), output);
  }

  // optional .goby.RelatedAlignmentEntry pair_alignment_link = 16;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::pair_alignment_link(this), output);
  }

  // optional uint32 fragment_index = 17;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(17, this->fragment_index(), output);
  }

  // optional .goby.RelatedAlignmentEntry spliced_forward_alignment_link = 18;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::spliced_forward_alignment_link(this), output);
  }

  // optional uint32 spliced_flags = 19;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(19, this->spliced_flags(), output);
  }

  // optional sint32 insert_size = 20;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(20, this->insert_size(), output);
  }

  // optional uint32 sample_index = 21;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(21, this->sample_index(), output);
  }

  // optional .goby.RelatedAlignmentEntry spliced_backward_alignment_link = 22;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::spliced_backward_alignment_link(this), output);
  }

  // optional uint32 query_index_occurrences = 25;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(25, this->query_index_occurrences(), output);
  }

  // optional uint32 read_origin_index = 26;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(26, this->read_origin_index(), output);
  }

  // optional uint32 ambiguity = 27;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(27, this->ambiguity(), output);
  }

  // optional string softClippedBasesLeft = 30;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softclippedbasesleft().data(), static_cast<int>(this->softclippedbasesleft().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentEntry.softClippedBasesLeft");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->softclippedbasesleft(), output);
  }

  // optional string softClippedBasesRight = 31;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softclippedbasesright().data(), static_cast<int>(this->softclippedbasesright().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentEntry.softClippedBasesRight");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->softclippedbasesright(), output);
  }

  // optional bytes softClippedQualityLeft = 32;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      32, this->softclippedqualityleft(), output);
  }

  // optional bytes softClippedQualityRight = 33;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      33, this->softclippedqualityright(), output);
  }

  // optional string placedUnmappedSequence = 40;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->placedunmappedsequence().data(), static_cast<int>(this->placedunmappedsequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentEntry.placedUnmappedSequence");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->placedunmappedsequence(), output);
  }

  // optional bytes placedUnmappedQuality = 41;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      41, this->placedunmappedquality(), output);
  }

  // optional string readName = 42;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readname().data(), static_cast<int>(this->readname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentEntry.readName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->readname(), output);
  }

  // repeated string bam_attributes = 50;
  for (int i = 0, n = this->bam_attributes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bam_attributes(i).data(), static_cast<int>(this->bam_attributes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentEntry.bam_attributes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      50, this->bam_attributes(i), output);
  }

  // optional bytes read_quality_scores = 55;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      55, this->read_quality_scores(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:goby.AlignmentEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlignmentEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:goby.AlignmentEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 query_index = 1;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->query_index(), target);
  }

  // optional uint32 target_index = 2;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_index(), target);
  }

  // optional uint32 position = 3;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  // optional float score = 4;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->score(), target);
  }

  // optional uint32 query_position = 5;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->query_position(), target);
  }

  // optional bool matching_reverse_strand = 6;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->matching_reverse_strand(), target);
  }

  // optional uint32 multiplicity = 7;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->multiplicity(), target);
  }

  // optional uint32 number_of_mismatches = 8;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->number_of_mismatches(), target);
  }

  // optional uint32 number_of_indels = 9;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->number_of_indels(), target);
  }

  // optional uint32 query_length = 10;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->query_length(), target);
  }

  // optional uint32 query_aligned_length = 11;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->query_aligned_length(), target);
  }

  // optional uint32 target_aligned_length = 12;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->target_aligned_length(), target);
  }

  // repeated .goby.SequenceVariation sequence_variations = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_variations_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->sequence_variations(static_cast<int>(i)), target);
  }

  // optional int32 mapping_quality = 14;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->mapping_quality(), target);
  }

  // optional uint32 pair_flags = 15;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->pair_flags(), target);
  }

  // optional .goby.RelatedAlignmentEntry pair_alignment_link = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::pair_alignment_link(this), target);
  }

  // optional uint32 fragment_index = 17;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->fragment_index(), target);
  }

  // optional .goby.RelatedAlignmentEntry spliced_forward_alignment_link = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::spliced_forward_alignment_link(this), target);
  }

  // optional uint32 spliced_flags = 19;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->spliced_flags(), target);
  }

  // optional sint32 insert_size = 20;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(20, this->insert_size(), target);
  }

  // optional uint32 sample_index = 21;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->sample_index(), target);
  }

  // optional .goby.RelatedAlignmentEntry spliced_backward_alignment_link = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::spliced_backward_alignment_link(this), target);
  }

  // optional uint32 query_index_occurrences = 25;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->query_index_occurrences(), target);
  }

  // optional uint32 read_origin_index = 26;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->read_origin_index(), target);
  }

  // optional uint32 ambiguity = 27;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->ambiguity(), target);
  }

  // optional string softClippedBasesLeft = 30;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softclippedbasesleft().data(), static_cast<int>(this->softclippedbasesleft().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentEntry.softClippedBasesLeft");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        30, this->softclippedbasesleft(), target);
  }

  // optional string softClippedBasesRight = 31;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softclippedbasesright().data(), static_cast<int>(this->softclippedbasesright().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentEntry.softClippedBasesRight");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        31, this->softclippedbasesright(), target);
  }

  // optional bytes softClippedQualityLeft = 32;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        32, this->softclippedqualityleft(), target);
  }

  // optional bytes softClippedQualityRight = 33;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        33, this->softclippedqualityright(), target);
  }

  // optional string placedUnmappedSequence = 40;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->placedunmappedsequence().data(), static_cast<int>(this->placedunmappedsequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentEntry.placedUnmappedSequence");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        40, this->placedunmappedsequence(), target);
  }

  // optional bytes placedUnmappedQuality = 41;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        41, this->placedunmappedquality(), target);
  }

  // optional string readName = 42;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readname().data(), static_cast<int>(this->readname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentEntry.readName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        42, this->readname(), target);
  }

  // repeated string bam_attributes = 50;
  for (int i = 0, n = this->bam_attributes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bam_attributes(i).data(), static_cast<int>(this->bam_attributes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentEntry.bam_attributes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(50, this->bam_attributes(i), target);
  }

  // optional bytes read_quality_scores = 55;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        55, this->read_quality_scores(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goby.AlignmentEntry)
  return target;
}

size_t AlignmentEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goby.AlignmentEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .goby.SequenceVariation sequence_variations = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->sequence_variations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sequence_variations(static_cast<int>(i)));
    }
  }

  // repeated string bam_attributes = 50;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->bam_attributes_size());
  for (int i = 0, n = this->bam_attributes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->bam_attributes(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string softClippedBasesLeft = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->softclippedbasesleft());
    }

    // optional string softClippedBasesRight = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->softclippedbasesright());
    }

    // optional bytes softClippedQualityLeft = 32;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->softclippedqualityleft());
    }

    // optional bytes softClippedQualityRight = 33;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->softclippedqualityright());
    }

    // optional string placedUnmappedSequence = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->placedunmappedsequence());
    }

    // optional bytes placedUnmappedQuality = 41;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->placedunmappedquality());
    }

    // optional string readName = 42;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->readname());
    }

    // optional bytes read_quality_scores = 55;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->read_quality_scores());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .goby.RelatedAlignmentEntry pair_alignment_link = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pair_alignment_link_);
    }

    // optional .goby.RelatedAlignmentEntry spliced_forward_alignment_link = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spliced_forward_alignment_link_);
    }

    // optional .goby.RelatedAlignmentEntry spliced_backward_alignment_link = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spliced_backward_alignment_link_);
    }

    // optional uint32 query_index = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->query_index());
    }

    // optional uint32 target_index = 2;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->target_index());
    }

    // optional uint32 position = 3;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional float score = 4;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional uint32 query_position = 5;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->query_position());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool matching_reverse_strand = 6;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional uint32 multiplicity = 7;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->multiplicity());
    }

    // optional uint32 number_of_mismatches = 8;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_mismatches());
    }

    // optional uint32 number_of_indels = 9;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_indels());
    }

    // optional uint32 query_length = 10;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->query_length());
    }

    // optional uint32 query_aligned_length = 11;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->query_aligned_length());
    }

    // optional uint32 target_aligned_length = 12;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->target_aligned_length());
    }

    // optional int32 mapping_quality = 14;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mapping_quality());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 pair_flags = 15;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pair_flags());
    }

    // optional uint32 fragment_index = 17;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fragment_index());
    }

    // optional uint32 spliced_flags = 19;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->spliced_flags());
    }

    // optional sint32 insert_size = 20;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->insert_size());
    }

    // optional uint32 sample_index = 21;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sample_index());
    }

    // optional uint32 query_index_occurrences = 25;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->query_index_occurrences());
    }

    // optional uint32 read_origin_index = 26;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->read_origin_index());
    }

    // optional uint32 ambiguity = 27;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ambiguity());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlignmentEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goby.AlignmentEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const AlignmentEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlignmentEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goby.AlignmentEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goby.AlignmentEntry)
    MergeFrom(*source);
  }
}

void AlignmentEntry::MergeFrom(const AlignmentEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goby.AlignmentEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sequence_variations_.MergeFrom(from.sequence_variations_);
  bam_attributes_.MergeFrom(from.bam_attributes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      softclippedbasesleft_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.softclippedbasesleft_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      softclippedbasesright_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.softclippedbasesright_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      softclippedqualityleft_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.softclippedqualityleft_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      softclippedqualityright_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.softclippedqualityright_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      placedunmappedsequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.placedunmappedsequence_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      placedunmappedquality_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.placedunmappedquality_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      readname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.readname_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      read_quality_scores_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.read_quality_scores_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_pair_alignment_link()->::goby::RelatedAlignmentEntry::MergeFrom(from.pair_alignment_link());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_spliced_forward_alignment_link()->::goby::RelatedAlignmentEntry::MergeFrom(from.spliced_forward_alignment_link());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_spliced_backward_alignment_link()->::goby::RelatedAlignmentEntry::MergeFrom(from.spliced_backward_alignment_link());
    }
    if (cached_has_bits & 0x00000800u) {
      query_index_ = from.query_index_;
    }
    if (cached_has_bits & 0x00001000u) {
      target_index_ = from.target_index_;
    }
    if (cached_has_bits & 0x00002000u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00004000u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00008000u) {
      query_position_ = from.query_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      matching_reverse_strand_ = from.matching_reverse_strand_;
    }
    if (cached_has_bits & 0x00020000u) {
      multiplicity_ = from.multiplicity_;
    }
    if (cached_has_bits & 0x00040000u) {
      number_of_mismatches_ = from.number_of_mismatches_;
    }
    if (cached_has_bits & 0x00080000u) {
      number_of_indels_ = from.number_of_indels_;
    }
    if (cached_has_bits & 0x00100000u) {
      query_length_ = from.query_length_;
    }
    if (cached_has_bits & 0x00200000u) {
      query_aligned_length_ = from.query_aligned_length_;
    }
    if (cached_has_bits & 0x00400000u) {
      target_aligned_length_ = from.target_aligned_length_;
    }
    if (cached_has_bits & 0x00800000u) {
      mapping_quality_ = from.mapping_quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      pair_flags_ = from.pair_flags_;
    }
    if (cached_has_bits & 0x02000000u) {
      fragment_index_ = from.fragment_index_;
    }
    if (cached_has_bits & 0x04000000u) {
      spliced_flags_ = from.spliced_flags_;
    }
    if (cached_has_bits & 0x08000000u) {
      insert_size_ = from.insert_size_;
    }
    if (cached_has_bits & 0x10000000u) {
      sample_index_ = from.sample_index_;
    }
    if (cached_has_bits & 0x20000000u) {
      query_index_occurrences_ = from.query_index_occurrences_;
    }
    if (cached_has_bits & 0x40000000u) {
      read_origin_index_ = from.read_origin_index_;
    }
    if (cached_has_bits & 0x80000000u) {
      ambiguity_ = from.ambiguity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlignmentEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goby.AlignmentEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlignmentEntry::CopyFrom(const AlignmentEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goby.AlignmentEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlignmentEntry::IsInitialized() const {
  return true;
}

void AlignmentEntry::Swap(AlignmentEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlignmentEntry::InternalSwap(AlignmentEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sequence_variations_)->InternalSwap(CastToBase(&other->sequence_variations_));
  bam_attributes_.InternalSwap(CastToBase(&other->bam_attributes_));
  softclippedbasesleft_.Swap(&other->softclippedbasesleft_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  softclippedbasesright_.Swap(&other->softclippedbasesright_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  softclippedqualityleft_.Swap(&other->softclippedqualityleft_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  softclippedqualityright_.Swap(&other->softclippedqualityright_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  placedunmappedsequence_.Swap(&other->placedunmappedsequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  placedunmappedquality_.Swap(&other->placedunmappedquality_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  readname_.Swap(&other->readname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  read_quality_scores_.Swap(&other->read_quality_scores_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pair_alignment_link_, other->pair_alignment_link_);
  swap(spliced_forward_alignment_link_, other->spliced_forward_alignment_link_);
  swap(spliced_backward_alignment_link_, other->spliced_backward_alignment_link_);
  swap(query_index_, other->query_index_);
  swap(target_index_, other->target_index_);
  swap(position_, other->position_);
  swap(score_, other->score_);
  swap(query_position_, other->query_position_);
  swap(matching_reverse_strand_, other->matching_reverse_strand_);
  swap(multiplicity_, other->multiplicity_);
  swap(number_of_mismatches_, other->number_of_mismatches_);
  swap(number_of_indels_, other->number_of_indels_);
  swap(query_length_, other->query_length_);
  swap(query_aligned_length_, other->query_aligned_length_);
  swap(target_aligned_length_, other->target_aligned_length_);
  swap(mapping_quality_, other->mapping_quality_);
  swap(pair_flags_, other->pair_flags_);
  swap(fragment_index_, other->fragment_index_);
  swap(spliced_flags_, other->spliced_flags_);
  swap(insert_size_, other->insert_size_);
  swap(sample_index_, other->sample_index_);
  swap(query_index_occurrences_, other->query_index_occurrences_);
  swap(read_origin_index_, other->read_origin_index_);
  swap(ambiguity_, other->ambiguity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlignmentEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelatedAlignmentEntry::InitAsDefaultInstance() {
}
class RelatedAlignmentEntry::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RelatedAlignmentEntry>()._has_bits_);
  static void set_has_target_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fragment_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optimized_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelatedAlignmentEntry::kTargetIndexFieldNumber;
const int RelatedAlignmentEntry::kPositionFieldNumber;
const int RelatedAlignmentEntry::kFragmentIndexFieldNumber;
const int RelatedAlignmentEntry::kOptimizedIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelatedAlignmentEntry::RelatedAlignmentEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goby.RelatedAlignmentEntry)
}
RelatedAlignmentEntry::RelatedAlignmentEntry(const RelatedAlignmentEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_index_, &from.target_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&optimized_index_) -
    reinterpret_cast<char*>(&target_index_)) + sizeof(optimized_index_));
  // @@protoc_insertion_point(copy_constructor:goby.RelatedAlignmentEntry)
}

void RelatedAlignmentEntry::SharedCtor() {
  ::memset(&target_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optimized_index_) -
      reinterpret_cast<char*>(&target_index_)) + sizeof(optimized_index_));
}

RelatedAlignmentEntry::~RelatedAlignmentEntry() {
  // @@protoc_insertion_point(destructor:goby.RelatedAlignmentEntry)
  SharedDtor();
}

void RelatedAlignmentEntry::SharedDtor() {
}

void RelatedAlignmentEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatedAlignmentEntry& RelatedAlignmentEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatedAlignmentEntry_Alignments_2eproto.base);
  return *internal_default_instance();
}


void RelatedAlignmentEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:goby.RelatedAlignmentEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&target_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optimized_index_) -
        reinterpret_cast<char*>(&target_index_)) + sizeof(optimized_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RelatedAlignmentEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 target_index = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        HasBitSetters::set_has_target_index(&has_bits);
        target_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 position = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        HasBitSetters::set_has_position(&has_bits);
        position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 fragment_index = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        HasBitSetters::set_has_fragment_index(&has_bits);
        fragment_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 optimized_index = 50;
      case 50: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 144) goto handle_unusual;
        HasBitSetters::set_has_optimized_index(&has_bits);
        optimized_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RelatedAlignmentEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:goby.RelatedAlignmentEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_target_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fragment_index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_fragment_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fragment_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 optimized_index = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (400 & 0xFF)) {
          HasBitSetters::set_has_optimized_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optimized_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goby.RelatedAlignmentEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goby.RelatedAlignmentEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RelatedAlignmentEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goby.RelatedAlignmentEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->target_index(), output);
  }

  // optional uint32 position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // optional uint32 fragment_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->fragment_index(), output);
  }

  // optional uint32 optimized_index = 50;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(50, this->optimized_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:goby.RelatedAlignmentEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatedAlignmentEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:goby.RelatedAlignmentEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_index(), target);
  }

  // optional uint32 position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // optional uint32 fragment_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->fragment_index(), target);
  }

  // optional uint32 optimized_index = 50;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->optimized_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goby.RelatedAlignmentEntry)
  return target;
}

size_t RelatedAlignmentEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goby.RelatedAlignmentEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 target_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->target_index());
    }

    // optional uint32 position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint32 fragment_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fragment_index());
    }

    // optional uint32 optimized_index = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->optimized_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatedAlignmentEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goby.RelatedAlignmentEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatedAlignmentEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelatedAlignmentEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goby.RelatedAlignmentEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goby.RelatedAlignmentEntry)
    MergeFrom(*source);
  }
}

void RelatedAlignmentEntry::MergeFrom(const RelatedAlignmentEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goby.RelatedAlignmentEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      target_index_ = from.target_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000004u) {
      fragment_index_ = from.fragment_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      optimized_index_ = from.optimized_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RelatedAlignmentEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goby.RelatedAlignmentEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatedAlignmentEntry::CopyFrom(const RelatedAlignmentEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goby.RelatedAlignmentEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedAlignmentEntry::IsInitialized() const {
  return true;
}

void RelatedAlignmentEntry::Swap(RelatedAlignmentEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelatedAlignmentEntry::InternalSwap(RelatedAlignmentEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_index_, other->target_index_);
  swap(position_, other->position_);
  swap(fragment_index_, other->fragment_index_);
  swap(optimized_index_, other->optimized_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatedAlignmentEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SequenceVariation::InitAsDefaultInstance() {
}
class SequenceVariation::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<SequenceVariation>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_read_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_to_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceVariation::kFromFieldNumber;
const int SequenceVariation::kToFieldNumber;
const int SequenceVariation::kPositionFieldNumber;
const int SequenceVariation::kReadIndexFieldNumber;
const int SequenceVariation::kToQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceVariation::SequenceVariation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goby.SequenceVariation)
}
SequenceVariation::SequenceVariation(const SequenceVariation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_to()) {
    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_from()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_quality()) {
    to_quality_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_quality_);
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_index_) -
    reinterpret_cast<char*>(&position_)) + sizeof(read_index_));
  // @@protoc_insertion_point(copy_constructor:goby.SequenceVariation)
}

void SequenceVariation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SequenceVariation_Alignments_2eproto.base);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_index_) -
      reinterpret_cast<char*>(&position_)) + sizeof(read_index_));
}

SequenceVariation::~SequenceVariation() {
  // @@protoc_insertion_point(destructor:goby.SequenceVariation)
  SharedDtor();
}

void SequenceVariation::SharedDtor() {
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_quality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SequenceVariation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SequenceVariation& SequenceVariation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SequenceVariation_Alignments_2eproto.base);
  return *internal_default_instance();
}


void SequenceVariation::Clear() {
// @@protoc_insertion_point(message_clear_start:goby.SequenceVariation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      to_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      from_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      to_quality_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&read_index_) -
        reinterpret_cast<char*>(&position_)) + sizeof(read_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SequenceVariation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string to = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_to(), ptr, ctx, "goby.SequenceVariation.to");
        CHK_(ptr);
        break;
      }
      // optional string from = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_from(), ptr, ctx, "goby.SequenceVariation.from");
        CHK_(ptr);
        break;
      }
      // optional uint32 position = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        HasBitSetters::set_has_position(&has_bits);
        position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional bytes to_quality = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_to_quality(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // optional uint32 read_index = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        HasBitSetters::set_has_read_index(&has_bits);
        read_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SequenceVariation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:goby.SequenceVariation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string to = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to().data(), static_cast<int>(this->to().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.SequenceVariation.to");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from().data(), static_cast<int>(this->from().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.SequenceVariation.from");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes to_quality = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_quality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 read_index = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_read_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &read_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goby.SequenceVariation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goby.SequenceVariation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SequenceVariation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goby.SequenceVariation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string to = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), static_cast<int>(this->to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.SequenceVariation.to");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->to(), output);
  }

  // optional string from = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), static_cast<int>(this->from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.SequenceVariation.from");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from(), output);
  }

  // optional uint32 position = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  // optional bytes to_quality = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->to_quality(), output);
  }

  // optional uint32 read_index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->read_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:goby.SequenceVariation)
}

::PROTOBUF_NAMESPACE_ID::uint8* SequenceVariation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:goby.SequenceVariation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string to = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), static_cast<int>(this->to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.SequenceVariation.to");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->to(), target);
  }

  // optional string from = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), static_cast<int>(this->from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.SequenceVariation.from");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->from(), target);
  }

  // optional uint32 position = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  // optional bytes to_quality = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->to_quality(), target);
  }

  // optional uint32 read_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->read_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goby.SequenceVariation)
  return target;
}

size_t SequenceVariation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goby.SequenceVariation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string to = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->to());
    }

    // optional string from = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->from());
    }

    // optional bytes to_quality = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->to_quality());
    }

    // optional uint32 position = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint32 read_index = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->read_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceVariation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goby.SequenceVariation)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceVariation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SequenceVariation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goby.SequenceVariation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goby.SequenceVariation)
    MergeFrom(*source);
  }
}

void SequenceVariation::MergeFrom(const SequenceVariation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goby.SequenceVariation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      to_quality_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_quality_);
    }
    if (cached_has_bits & 0x00000008u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000010u) {
      read_index_ = from.read_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SequenceVariation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goby.SequenceVariation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceVariation::CopyFrom(const SequenceVariation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goby.SequenceVariation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceVariation::IsInitialized() const {
  return true;
}

void SequenceVariation::Swap(SequenceVariation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceVariation::InternalSwap(SequenceVariation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_quality_.Swap(&other->to_quality_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(read_index_, other->read_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SequenceVariation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlignmentHeader::InitAsDefaultInstance() {
  ::goby::_AlignmentHeader_default_instance_._instance.get_mutable()->query_name_mapping_ = const_cast< ::goby::IdentifierMapping*>(
      ::goby::IdentifierMapping::internal_default_instance());
  ::goby::_AlignmentHeader_default_instance_._instance.get_mutable()->target_name_mapping_ = const_cast< ::goby::IdentifierMapping*>(
      ::goby::IdentifierMapping::internal_default_instance());
}
class AlignmentHeader::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<AlignmentHeader>()._has_bits_);
  static void set_has_smallest_split_query_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_largest_split_query_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::goby::IdentifierMapping& query_name_mapping(const AlignmentHeader* msg);
  static void set_has_query_name_mapping(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::goby::IdentifierMapping& target_name_mapping(const AlignmentHeader* msg);
  static void set_has_target_name_mapping(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_number_of_queries(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_of_targets(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_number_of_aligned_reads(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_constant_query_length(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sorted(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_indexed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_query_lengths_stored_in_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_aligner_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_aligner_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_query_indices_were_permuted(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_query_index_occurrences(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ambiguity_stored_in_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_all_read_quality_scores(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::goby::IdentifierMapping&
AlignmentHeader::HasBitSetters::query_name_mapping(const AlignmentHeader* msg) {
  return *msg->query_name_mapping_;
}
const ::goby::IdentifierMapping&
AlignmentHeader::HasBitSetters::target_name_mapping(const AlignmentHeader* msg) {
  return *msg->target_name_mapping_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlignmentHeader::kSmallestSplitQueryIndexFieldNumber;
const int AlignmentHeader::kLargestSplitQueryIndexFieldNumber;
const int AlignmentHeader::kQueryNameMappingFieldNumber;
const int AlignmentHeader::kTargetNameMappingFieldNumber;
const int AlignmentHeader::kNumberOfQueriesFieldNumber;
const int AlignmentHeader::kNumberOfTargetsFieldNumber;
const int AlignmentHeader::kNumberOfAlignedReadsFieldNumber;
const int AlignmentHeader::kQueryLengthFieldNumber;
const int AlignmentHeader::kConstantQueryLengthFieldNumber;
const int AlignmentHeader::kTargetLengthFieldNumber;
const int AlignmentHeader::kSortedFieldNumber;
const int AlignmentHeader::kIndexedFieldNumber;
const int AlignmentHeader::kQueryLengthsStoredInEntriesFieldNumber;
const int AlignmentHeader::kAlignerNameFieldNumber;
const int AlignmentHeader::kAlignerVersionFieldNumber;
const int AlignmentHeader::kVersionFieldNumber;
const int AlignmentHeader::kSampleBasenameFieldNumber;
const int AlignmentHeader::kQueryIndicesWerePermutedFieldNumber;
const int AlignmentHeader::kQueryIndexOccurrencesFieldNumber;
const int AlignmentHeader::kAmbiguityStoredInEntriesFieldNumber;
const int AlignmentHeader::kAllReadQualityScoresFieldNumber;
const int AlignmentHeader::kReadOriginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlignmentHeader::AlignmentHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goby.AlignmentHeader)
}
AlignmentHeader::AlignmentHeader(const AlignmentHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      query_length_(from.query_length_),
      target_length_(from.target_length_),
      read_origin_(from.read_origin_),
      sample_basename_(from.sample_basename_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aligner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_aligner_name()) {
    aligner_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aligner_name_);
  }
  aligner_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_aligner_version()) {
    aligner_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aligner_version_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_query_name_mapping()) {
    query_name_mapping_ = new ::goby::IdentifierMapping(*from.query_name_mapping_);
  } else {
    query_name_mapping_ = nullptr;
  }
  if (from.has_target_name_mapping()) {
    target_name_mapping_ = new ::goby::IdentifierMapping(*from.target_name_mapping_);
  } else {
    target_name_mapping_ = nullptr;
  }
  ::memcpy(&number_of_queries_, &from.number_of_queries_,
    static_cast<size_t>(reinterpret_cast<char*>(&all_read_quality_scores_) -
    reinterpret_cast<char*>(&number_of_queries_)) + sizeof(all_read_quality_scores_));
  // @@protoc_insertion_point(copy_constructor:goby.AlignmentHeader)
}

void AlignmentHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlignmentHeader_Alignments_2eproto.base);
  aligner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aligner_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_name_mapping_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_read_quality_scores_) -
      reinterpret_cast<char*>(&query_name_mapping_)) + sizeof(all_read_quality_scores_));
}

AlignmentHeader::~AlignmentHeader() {
  // @@protoc_insertion_point(destructor:goby.AlignmentHeader)
  SharedDtor();
}

void AlignmentHeader::SharedDtor() {
  aligner_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aligner_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_name_mapping_;
  if (this != internal_default_instance()) delete target_name_mapping_;
}

void AlignmentHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlignmentHeader& AlignmentHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlignmentHeader_Alignments_2eproto.base);
  return *internal_default_instance();
}


void AlignmentHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:goby.AlignmentHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_length_.Clear();
  target_length_.Clear();
  read_origin_.Clear();
  sample_basename_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      aligner_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      aligner_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(query_name_mapping_ != nullptr);
      query_name_mapping_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(target_name_mapping_ != nullptr);
      target_name_mapping_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&number_of_queries_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_aligned_reads_) -
        reinterpret_cast<char*>(&number_of_queries_)) + sizeof(number_of_aligned_reads_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&smallest_split_query_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_index_occurrences_) -
        reinterpret_cast<char*>(&smallest_split_query_index_)) + sizeof(query_index_occurrences_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&ambiguity_stored_in_entries_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&all_read_quality_scores_) -
        reinterpret_cast<char*>(&ambiguity_stored_in_entries_)) + sizeof(all_read_quality_scores_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlignmentHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .goby.IdentifierMapping query_name_mapping = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_query_name_mapping(), ptr);
        CHK_(ptr);
        break;
      }
      // optional .goby.IdentifierMapping target_name_mapping = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_target_name_mapping(), ptr);
        CHK_(ptr);
        break;
      }
      // repeated uint32 query_length = 3 [deprecated = true];
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          while (true) {
            add_query_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
            if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 24) break;
            ptr += 1;
          }
          break;
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_query_length(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // optional uint32 number_of_queries = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        HasBitSetters::set_has_number_of_queries(&has_bits);
        number_of_queries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 number_of_targets = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        HasBitSetters::set_has_number_of_targets(&has_bits);
        number_of_targets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 number_of_aligned_reads = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 56) goto handle_unusual;
        HasBitSetters::set_has_number_of_aligned_reads(&has_bits);
        number_of_aligned_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // repeated uint32 target_length = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          while (true) {
            add_target_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
            if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 64) break;
            ptr += 1;
          }
          break;
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_target_length(), ptr, ctx);
        CHK_(ptr);
        break;
      }
      // optional uint32 smallest_split_query_index = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        HasBitSetters::set_has_smallest_split_query_index(&has_bits);
        smallest_split_query_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 constant_query_length = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 80) goto handle_unusual;
        HasBitSetters::set_has_constant_query_length(&has_bits);
        constant_query_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 largest_split_query_index = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 88) goto handle_unusual;
        HasBitSetters::set_has_largest_split_query_index(&has_bits);
        largest_split_query_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional bool sorted = 13;
      case 13: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 104) goto handle_unusual;
        HasBitSetters::set_has_sorted(&has_bits);
        sorted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional bool indexed = 14;
      case 14: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 112) goto handle_unusual;
        HasBitSetters::set_has_indexed(&has_bits);
        indexed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional bool query_lengths_stored_in_entries = 15;
      case 15: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 120) goto handle_unusual;
        HasBitSetters::set_has_query_lengths_stored_in_entries(&has_bits);
        query_lengths_stored_in_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional string aligner_name = 17;
      case 17: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_aligner_name(), ptr, ctx, "goby.AlignmentHeader.aligner_name");
        CHK_(ptr);
        break;
      }
      // optional string aligner_version = 18;
      case 18: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_aligner_version(), ptr, ctx, "goby.AlignmentHeader.aligner_version");
        CHK_(ptr);
        break;
      }
      // optional string version = 25;
      case 25: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_version(), ptr, ctx, "goby.AlignmentHeader.version");
        CHK_(ptr);
        break;
      }
      // optional bool query_indices_were_permuted = 26;
      case 26: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 208) goto handle_unusual;
        HasBitSetters::set_has_query_indices_were_permuted(&has_bits);
        query_indices_were_permuted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // repeated .goby.ReadOriginInfo read_origin = 27;
      case 27: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 218) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_read_origin(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) != 474) break;
          ptr += 2;
        }
        break;
      }
      // repeated string sample_basename = 30;
      case 30: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 242) goto handle_unusual;
        while (true) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_sample_basename(), ptr, ctx, "goby.AlignmentHeader.sample_basename");
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) != 498) break;
          ptr += 2;
        }
        break;
      }
      // optional bool query_index_occurrences = 35;
      case 35: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        HasBitSetters::set_has_query_index_occurrences(&has_bits);
        query_index_occurrences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional bool ambiguity_stored_in_entries = 36;
      case 36: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        HasBitSetters::set_has_ambiguity_stored_in_entries(&has_bits);
        ambiguity_stored_in_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional bool all_read_quality_scores = 40;
      case 40: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 64) goto handle_unusual;
        HasBitSetters::set_has_all_read_quality_scores(&has_bits);
        all_read_quality_scores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlignmentHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:goby.AlignmentHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .goby.IdentifierMapping query_name_mapping = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_query_name_mapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .goby.IdentifierMapping target_name_mapping = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target_name_mapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 query_length = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_query_length())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_query_length())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_queries = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_number_of_queries(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_queries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_targets = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_number_of_targets(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_targets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_aligned_reads = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_number_of_aligned_reads(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_aligned_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 target_length = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_target_length())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_target_length())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 smallest_split_query_index = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_smallest_split_query_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smallest_split_query_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 constant_query_length = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_constant_query_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constant_query_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 largest_split_query_index = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_largest_split_query_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &largest_split_query_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sorted = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_sorted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sorted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool indexed = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_indexed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &indexed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool query_lengths_stored_in_entries = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_query_lengths_stored_in_entries(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_lengths_stored_in_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string aligner_name = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_aligner_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aligner_name().data(), static_cast<int>(this->aligner_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.AlignmentHeader.aligner_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string aligner_version = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_aligner_version()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aligner_version().data(), static_cast<int>(this->aligner_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.AlignmentHeader.aligner_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.AlignmentHeader.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool query_indices_were_permuted = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_query_indices_were_permuted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_indices_were_permuted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .goby.ReadOriginInfo read_origin = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_read_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sample_basename = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_sample_basename()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sample_basename(this->sample_basename_size() - 1).data(),
            static_cast<int>(this->sample_basename(this->sample_basename_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.AlignmentHeader.sample_basename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool query_index_occurrences = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {
          HasBitSetters::set_has_query_index_occurrences(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_index_occurrences_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ambiguity_stored_in_entries = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {
          HasBitSetters::set_has_ambiguity_stored_in_entries(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ambiguity_stored_in_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool all_read_quality_scores = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {
          HasBitSetters::set_has_all_read_quality_scores(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_read_quality_scores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goby.AlignmentHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goby.AlignmentHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlignmentHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goby.AlignmentHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .goby.IdentifierMapping query_name_mapping = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::query_name_mapping(this), output);
  }

  // optional .goby.IdentifierMapping target_name_mapping = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::target_name_mapping(this), output);
  }

  // repeated uint32 query_length = 3 [deprecated = true];
  for (int i = 0, n = this->query_length_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      3, this->query_length(i), output);
  }

  // optional uint32 number_of_queries = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->number_of_queries(), output);
  }

  // optional uint32 number_of_targets = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->number_of_targets(), output);
  }

  // optional uint32 number_of_aligned_reads = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->number_of_aligned_reads(), output);
  }

  // repeated uint32 target_length = 8;
  for (int i = 0, n = this->target_length_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      8, this->target_length(i), output);
  }

  // optional uint32 smallest_split_query_index = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->smallest_split_query_index(), output);
  }

  // optional uint32 constant_query_length = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->constant_query_length(), output);
  }

  // optional uint32 largest_split_query_index = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->largest_split_query_index(), output);
  }

  // optional bool sorted = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->sorted(), output);
  }

  // optional bool indexed = 14;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->indexed(), output);
  }

  // optional bool query_lengths_stored_in_entries = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->query_lengths_stored_in_entries(), output);
  }

  // optional string aligner_name = 17;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aligner_name().data(), static_cast<int>(this->aligner_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentHeader.aligner_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->aligner_name(), output);
  }

  // optional string aligner_version = 18;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aligner_version().data(), static_cast<int>(this->aligner_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentHeader.aligner_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->aligner_version(), output);
  }

  // optional string version = 25;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentHeader.version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->version(), output);
  }

  // optional bool query_indices_were_permuted = 26;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->query_indices_were_permuted(), output);
  }

  // repeated .goby.ReadOriginInfo read_origin = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->read_origin_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      27,
      this->read_origin(static_cast<int>(i)),
      output);
  }

  // repeated string sample_basename = 30;
  for (int i = 0, n = this->sample_basename_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sample_basename(i).data(), static_cast<int>(this->sample_basename(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentHeader.sample_basename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      30, this->sample_basename(i), output);
  }

  // optional bool query_index_occurrences = 35;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(35, this->query_index_occurrences(), output);
  }

  // optional bool ambiguity_stored_in_entries = 36;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(36, this->ambiguity_stored_in_entries(), output);
  }

  // optional bool all_read_quality_scores = 40;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(40, this->all_read_quality_scores(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:goby.AlignmentHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlignmentHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:goby.AlignmentHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .goby.IdentifierMapping query_name_mapping = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::query_name_mapping(this), target);
  }

  // optional .goby.IdentifierMapping target_name_mapping = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::target_name_mapping(this), target);
  }

  // repeated uint32 query_length = 3 [deprecated = true];
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->query_length_, target);

  // optional uint32 number_of_queries = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->number_of_queries(), target);
  }

  // optional uint32 number_of_targets = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->number_of_targets(), target);
  }

  // optional uint32 number_of_aligned_reads = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->number_of_aligned_reads(), target);
  }

  // repeated uint32 target_length = 8;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->target_length_, target);

  // optional uint32 smallest_split_query_index = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->smallest_split_query_index(), target);
  }

  // optional uint32 constant_query_length = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->constant_query_length(), target);
  }

  // optional uint32 largest_split_query_index = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->largest_split_query_index(), target);
  }

  // optional bool sorted = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->sorted(), target);
  }

  // optional bool indexed = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->indexed(), target);
  }

  // optional bool query_lengths_stored_in_entries = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->query_lengths_stored_in_entries(), target);
  }

  // optional string aligner_name = 17;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aligner_name().data(), static_cast<int>(this->aligner_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentHeader.aligner_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->aligner_name(), target);
  }

  // optional string aligner_version = 18;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aligner_version().data(), static_cast<int>(this->aligner_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentHeader.aligner_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        18, this->aligner_version(), target);
  }

  // optional string version = 25;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentHeader.version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        25, this->version(), target);
  }

  // optional bool query_indices_were_permuted = 26;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->query_indices_were_permuted(), target);
  }

  // repeated .goby.ReadOriginInfo read_origin = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->read_origin_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, this->read_origin(static_cast<int>(i)), target);
  }

  // repeated string sample_basename = 30;
  for (int i = 0, n = this->sample_basename_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sample_basename(i).data(), static_cast<int>(this->sample_basename(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.AlignmentHeader.sample_basename");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(30, this->sample_basename(i), target);
  }

  // optional bool query_index_occurrences = 35;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->query_index_occurrences(), target);
  }

  // optional bool ambiguity_stored_in_entries = 36;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->ambiguity_stored_in_entries(), target);
  }

  // optional bool all_read_quality_scores = 40;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->all_read_quality_scores(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goby.AlignmentHeader)
  return target;
}

size_t AlignmentHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goby.AlignmentHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 query_length = 3 [deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->query_length_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->query_length_size());
    total_size += data_size;
  }

  // repeated uint32 target_length = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->target_length_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_length_size());
    total_size += data_size;
  }

  // repeated .goby.ReadOriginInfo read_origin = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->read_origin_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->read_origin(static_cast<int>(i)));
    }
  }

  // repeated string sample_basename = 30;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->sample_basename_size());
  for (int i = 0, n = this->sample_basename_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->sample_basename(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string aligner_name = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->aligner_name());
    }

    // optional string aligner_version = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->aligner_version());
    }

    // optional string version = 25;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .goby.IdentifierMapping query_name_mapping = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_name_mapping_);
    }

    // optional .goby.IdentifierMapping target_name_mapping = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_name_mapping_);
    }

    // optional uint32 number_of_queries = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_queries());
    }

    // optional uint32 number_of_targets = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_targets());
    }

    // optional uint32 number_of_aligned_reads = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_aligned_reads());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 smallest_split_query_index = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->smallest_split_query_index());
    }

    // optional uint32 constant_query_length = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->constant_query_length());
    }

    // optional uint32 largest_split_query_index = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->largest_split_query_index());
    }

    // optional bool sorted = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool indexed = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool query_lengths_stored_in_entries = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool query_indices_were_permuted = 26;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool query_index_occurrences = 35;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool ambiguity_stored_in_entries = 36;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool all_read_quality_scores = 40;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlignmentHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goby.AlignmentHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const AlignmentHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlignmentHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goby.AlignmentHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goby.AlignmentHeader)
    MergeFrom(*source);
  }
}

void AlignmentHeader::MergeFrom(const AlignmentHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goby.AlignmentHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_length_.MergeFrom(from.query_length_);
  target_length_.MergeFrom(from.target_length_);
  read_origin_.MergeFrom(from.read_origin_);
  sample_basename_.MergeFrom(from.sample_basename_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      aligner_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aligner_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      aligner_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aligner_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_query_name_mapping()->::goby::IdentifierMapping::MergeFrom(from.query_name_mapping());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_target_name_mapping()->::goby::IdentifierMapping::MergeFrom(from.target_name_mapping());
    }
    if (cached_has_bits & 0x00000020u) {
      number_of_queries_ = from.number_of_queries_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_of_targets_ = from.number_of_targets_;
    }
    if (cached_has_bits & 0x00000080u) {
      number_of_aligned_reads_ = from.number_of_aligned_reads_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      smallest_split_query_index_ = from.smallest_split_query_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      constant_query_length_ = from.constant_query_length_;
    }
    if (cached_has_bits & 0x00000400u) {
      largest_split_query_index_ = from.largest_split_query_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      sorted_ = from.sorted_;
    }
    if (cached_has_bits & 0x00001000u) {
      indexed_ = from.indexed_;
    }
    if (cached_has_bits & 0x00002000u) {
      query_lengths_stored_in_entries_ = from.query_lengths_stored_in_entries_;
    }
    if (cached_has_bits & 0x00004000u) {
      query_indices_were_permuted_ = from.query_indices_were_permuted_;
    }
    if (cached_has_bits & 0x00008000u) {
      query_index_occurrences_ = from.query_index_occurrences_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      ambiguity_stored_in_entries_ = from.ambiguity_stored_in_entries_;
    }
    if (cached_has_bits & 0x00020000u) {
      all_read_quality_scores_ = from.all_read_quality_scores_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlignmentHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goby.AlignmentHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlignmentHeader::CopyFrom(const AlignmentHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goby.AlignmentHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlignmentHeader::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->read_origin())) return false;
  if (has_query_name_mapping()) {
    if (!this->query_name_mapping_->IsInitialized()) return false;
  }
  if (has_target_name_mapping()) {
    if (!this->target_name_mapping_->IsInitialized()) return false;
  }
  return true;
}

void AlignmentHeader::Swap(AlignmentHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlignmentHeader::InternalSwap(AlignmentHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  query_length_.InternalSwap(&other->query_length_);
  target_length_.InternalSwap(&other->target_length_);
  CastToBase(&read_origin_)->InternalSwap(CastToBase(&other->read_origin_));
  sample_basename_.InternalSwap(CastToBase(&other->sample_basename_));
  aligner_name_.Swap(&other->aligner_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  aligner_version_.Swap(&other->aligner_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(query_name_mapping_, other->query_name_mapping_);
  swap(target_name_mapping_, other->target_name_mapping_);
  swap(number_of_queries_, other->number_of_queries_);
  swap(number_of_targets_, other->number_of_targets_);
  swap(number_of_aligned_reads_, other->number_of_aligned_reads_);
  swap(smallest_split_query_index_, other->smallest_split_query_index_);
  swap(constant_query_length_, other->constant_query_length_);
  swap(largest_split_query_index_, other->largest_split_query_index_);
  swap(sorted_, other->sorted_);
  swap(indexed_, other->indexed_);
  swap(query_lengths_stored_in_entries_, other->query_lengths_stored_in_entries_);
  swap(query_indices_were_permuted_, other->query_indices_were_permuted_);
  swap(query_index_occurrences_, other->query_index_occurrences_);
  swap(ambiguity_stored_in_entries_, other->ambiguity_stored_in_entries_);
  swap(all_read_quality_scores_, other->all_read_quality_scores_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlignmentHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IdentifierMapping::InitAsDefaultInstance() {
}
class IdentifierMapping::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<IdentifierMapping>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdentifierMapping::kMappingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdentifierMapping::IdentifierMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goby.IdentifierMapping)
}
IdentifierMapping::IdentifierMapping(const IdentifierMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mappings_(from.mappings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:goby.IdentifierMapping)
}

void IdentifierMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IdentifierMapping_Alignments_2eproto.base);
}

IdentifierMapping::~IdentifierMapping() {
  // @@protoc_insertion_point(destructor:goby.IdentifierMapping)
  SharedDtor();
}

void IdentifierMapping::SharedDtor() {
}

void IdentifierMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IdentifierMapping& IdentifierMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IdentifierMapping_Alignments_2eproto.base);
  return *internal_default_instance();
}


void IdentifierMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:goby.IdentifierMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IdentifierMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .goby.IdentifierInfo mappings = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_mappings(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 10) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IdentifierMapping::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:goby.IdentifierMapping)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .goby.IdentifierInfo mappings = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_mappings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goby.IdentifierMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goby.IdentifierMapping)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IdentifierMapping::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goby.IdentifierMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goby.IdentifierInfo mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->mappings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:goby.IdentifierMapping)
}

::PROTOBUF_NAMESPACE_ID::uint8* IdentifierMapping::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:goby.IdentifierMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goby.IdentifierInfo mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->mappings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goby.IdentifierMapping)
  return target;
}

size_t IdentifierMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goby.IdentifierMapping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .goby.IdentifierInfo mappings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mappings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->mappings(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IdentifierMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goby.IdentifierMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentifierMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IdentifierMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goby.IdentifierMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goby.IdentifierMapping)
    MergeFrom(*source);
  }
}

void IdentifierMapping::MergeFrom(const IdentifierMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goby.IdentifierMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappings_.MergeFrom(from.mappings_);
}

void IdentifierMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goby.IdentifierMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentifierMapping::CopyFrom(const IdentifierMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goby.IdentifierMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifierMapping::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->mappings())) return false;
  return true;
}

void IdentifierMapping::Swap(IdentifierMapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdentifierMapping::InternalSwap(IdentifierMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&mappings_)->InternalSwap(CastToBase(&other->mappings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentifierMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IdentifierInfo::InitAsDefaultInstance() {
}
class IdentifierInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<IdentifierInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdentifierInfo::kNameFieldNumber;
const int IdentifierInfo::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdentifierInfo::IdentifierInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goby.IdentifierInfo)
}
IdentifierInfo::IdentifierInfo(const IdentifierInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:goby.IdentifierInfo)
}

void IdentifierInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IdentifierInfo_Alignments_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
}

IdentifierInfo::~IdentifierInfo() {
  // @@protoc_insertion_point(destructor:goby.IdentifierInfo)
  SharedDtor();
}

void IdentifierInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IdentifierInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IdentifierInfo& IdentifierInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IdentifierInfo_Alignments_2eproto.base);
  return *internal_default_instance();
}


void IdentifierInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:goby.IdentifierInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IdentifierInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "goby.IdentifierInfo.name");
        CHK_(ptr);
        break;
      }
      // required uint32 index = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        HasBitSetters::set_has_index(&has_bits);
        index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IdentifierInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:goby.IdentifierInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.IdentifierInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goby.IdentifierInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goby.IdentifierInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IdentifierInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goby.IdentifierInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.IdentifierInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:goby.IdentifierInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* IdentifierInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:goby.IdentifierInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.IdentifierInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goby.IdentifierInfo)
  return target;
}

size_t IdentifierInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:goby.IdentifierInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_index()) {
    // required uint32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  return total_size;
}
size_t IdentifierInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goby.IdentifierInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IdentifierInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goby.IdentifierInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentifierInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IdentifierInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goby.IdentifierInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goby.IdentifierInfo)
    MergeFrom(*source);
  }
}

void IdentifierInfo::MergeFrom(const IdentifierInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goby.IdentifierInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IdentifierInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goby.IdentifierInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentifierInfo::CopyFrom(const IdentifierInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goby.IdentifierInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifierInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void IdentifierInfo::Swap(IdentifierInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdentifierInfo::InternalSwap(IdentifierInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentifierInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadOriginInfo::InitAsDefaultInstance() {
}
class ReadOriginInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ReadOriginInfo>()._has_bits_);
  static void set_has_origin_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_origin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sample(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_library(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_platform_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_run_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadOriginInfo::kOriginIndexFieldNumber;
const int ReadOriginInfo::kOriginIdFieldNumber;
const int ReadOriginInfo::kSampleFieldNumber;
const int ReadOriginInfo::kPlatformFieldNumber;
const int ReadOriginInfo::kLibraryFieldNumber;
const int ReadOriginInfo::kPlatformUnitFieldNumber;
const int ReadOriginInfo::kRunDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadOriginInfo::ReadOriginInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goby.ReadOriginInfo)
}
ReadOriginInfo::ReadOriginInfo(const ReadOriginInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  origin_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_origin_id()) {
    origin_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.origin_id_);
  }
  sample_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sample()) {
    sample_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_);
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform()) {
    platform_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  run_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_run_date()) {
    run_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.run_date_);
  }
  library_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_library()) {
    library_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.library_);
  }
  platform_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform_unit()) {
    platform_unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform_unit_);
  }
  origin_index_ = from.origin_index_;
  // @@protoc_insertion_point(copy_constructor:goby.ReadOriginInfo)
}

void ReadOriginInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadOriginInfo_Alignments_2eproto.base);
  origin_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  run_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  library_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origin_index_ = 0u;
}

ReadOriginInfo::~ReadOriginInfo() {
  // @@protoc_insertion_point(destructor:goby.ReadOriginInfo)
  SharedDtor();
}

void ReadOriginInfo::SharedDtor() {
  origin_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  run_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  library_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadOriginInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadOriginInfo& ReadOriginInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadOriginInfo_Alignments_2eproto.base);
  return *internal_default_instance();
}


void ReadOriginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:goby.ReadOriginInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      origin_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sample_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      platform_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      run_date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      library_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      platform_unit_.ClearNonDefaultToEmptyNoArena();
    }
  }
  origin_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadOriginInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 origin_index = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        HasBitSetters::set_has_origin_index(&has_bits);
        origin_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // required string origin_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_origin_id(), ptr, ctx, "goby.ReadOriginInfo.origin_id");
        CHK_(ptr);
        break;
      }
      // optional string sample = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_sample(), ptr, ctx, "goby.ReadOriginInfo.sample");
        CHK_(ptr);
        break;
      }
      // optional string platform = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_platform(), ptr, ctx, "goby.ReadOriginInfo.platform");
        CHK_(ptr);
        break;
      }
      // optional string run_date = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_run_date(), ptr, ctx, "goby.ReadOriginInfo.run_date");
        CHK_(ptr);
        break;
      }
      // optional string library = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_library(), ptr, ctx, "goby.ReadOriginInfo.library");
        CHK_(ptr);
        break;
      }
      // optional string platform_unit = 12;
      case 12: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_platform_unit(), ptr, ctx, "goby.ReadOriginInfo.platform_unit");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadOriginInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:goby.ReadOriginInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 origin_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_origin_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string origin_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_origin_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->origin_id().data(), static_cast<int>(this->origin_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.ReadOriginInfo.origin_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sample = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sample()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sample().data(), static_cast<int>(this->sample().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.ReadOriginInfo.sample");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string platform = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), static_cast<int>(this->platform().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.ReadOriginInfo.platform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string run_date = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_run_date()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->run_date().data(), static_cast<int>(this->run_date().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.ReadOriginInfo.run_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string library = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_library()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->library().data(), static_cast<int>(this->library().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.ReadOriginInfo.library");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string platform_unit = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_unit()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform_unit().data(), static_cast<int>(this->platform_unit().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "goby.ReadOriginInfo.platform_unit");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goby.ReadOriginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goby.ReadOriginInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadOriginInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goby.ReadOriginInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 origin_index = 1;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->origin_index(), output);
  }

  // required string origin_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin_id().data(), static_cast<int>(this->origin_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.origin_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->origin_id(), output);
  }

  // optional string sample = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sample().data(), static_cast<int>(this->sample().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.sample");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sample(), output);
  }

  // optional string platform = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.platform");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->platform(), output);
  }

  // optional string run_date = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->run_date().data(), static_cast<int>(this->run_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.run_date");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->run_date(), output);
  }

  // optional string library = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->library().data(), static_cast<int>(this->library().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.library");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->library(), output);
  }

  // optional string platform_unit = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_unit().data(), static_cast<int>(this->platform_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.platform_unit");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->platform_unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:goby.ReadOriginInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadOriginInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:goby.ReadOriginInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 origin_index = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->origin_index(), target);
  }

  // required string origin_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin_id().data(), static_cast<int>(this->origin_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.origin_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->origin_id(), target);
  }

  // optional string sample = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sample().data(), static_cast<int>(this->sample().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.sample");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->sample(), target);
  }

  // optional string platform = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.platform");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->platform(), target);
  }

  // optional string run_date = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->run_date().data(), static_cast<int>(this->run_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.run_date");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->run_date(), target);
  }

  // optional string library = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->library().data(), static_cast<int>(this->library().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.library");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->library(), target);
  }

  // optional string platform_unit = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_unit().data(), static_cast<int>(this->platform_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "goby.ReadOriginInfo.platform_unit");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->platform_unit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goby.ReadOriginInfo)
  return target;
}

size_t ReadOriginInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:goby.ReadOriginInfo)
  size_t total_size = 0;

  if (has_origin_id()) {
    // required string origin_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->origin_id());
  }

  if (has_origin_index()) {
    // required uint32 origin_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->origin_index());
  }

  return total_size;
}
size_t ReadOriginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goby.ReadOriginInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000041) ^ 0x00000041) == 0) {  // All required fields are present.
    // required string origin_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->origin_id());

    // required uint32 origin_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->origin_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string sample = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->sample());
    }

    // optional string platform = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string run_date = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->run_date());
    }

    // optional string library = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->library());
    }

    // optional string platform_unit = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->platform_unit());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadOriginInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goby.ReadOriginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadOriginInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadOriginInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goby.ReadOriginInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goby.ReadOriginInfo)
    MergeFrom(*source);
  }
}

void ReadOriginInfo::MergeFrom(const ReadOriginInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goby.ReadOriginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      origin_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.origin_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sample_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      platform_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      run_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.run_date_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      library_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.library_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      platform_unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform_unit_);
    }
    if (cached_has_bits & 0x00000040u) {
      origin_index_ = from.origin_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadOriginInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goby.ReadOriginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOriginInfo::CopyFrom(const ReadOriginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goby.ReadOriginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOriginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;
  return true;
}

void ReadOriginInfo::Swap(ReadOriginInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadOriginInfo::InternalSwap(ReadOriginInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  origin_id_.Swap(&other->origin_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sample_.Swap(&other->sample_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  run_date_.Swap(&other->run_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  library_.Swap(&other->library_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  platform_unit_.Swap(&other->platform_unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(origin_index_, other->origin_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOriginInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlignmentTooManyHits::InitAsDefaultInstance() {
}
class AlignmentTooManyHits::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<AlignmentTooManyHits>()._has_bits_);
  static void set_has_aligner_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlignmentTooManyHits::kAlignerThresholdFieldNumber;
const int AlignmentTooManyHits::kHitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlignmentTooManyHits::AlignmentTooManyHits()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goby.AlignmentTooManyHits)
}
AlignmentTooManyHits::AlignmentTooManyHits(const AlignmentTooManyHits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      hits_(from.hits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aligner_threshold_ = from.aligner_threshold_;
  // @@protoc_insertion_point(copy_constructor:goby.AlignmentTooManyHits)
}

void AlignmentTooManyHits::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlignmentTooManyHits_Alignments_2eproto.base);
  aligner_threshold_ = 0u;
}

AlignmentTooManyHits::~AlignmentTooManyHits() {
  // @@protoc_insertion_point(destructor:goby.AlignmentTooManyHits)
  SharedDtor();
}

void AlignmentTooManyHits::SharedDtor() {
}

void AlignmentTooManyHits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlignmentTooManyHits& AlignmentTooManyHits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlignmentTooManyHits_Alignments_2eproto.base);
  return *internal_default_instance();
}


void AlignmentTooManyHits::Clear() {
// @@protoc_insertion_point(message_clear_start:goby.AlignmentTooManyHits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  aligner_threshold_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlignmentTooManyHits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .goby.AmbiguousLocation hits = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_hits(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 10) break;
          ptr += 1;
        }
        break;
      }
      // required uint32 aligner_threshold = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        HasBitSetters::set_has_aligner_threshold(&has_bits);
        aligner_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlignmentTooManyHits::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:goby.AlignmentTooManyHits)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .goby.AmbiguousLocation hits = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_hits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 aligner_threshold = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_aligner_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aligner_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goby.AlignmentTooManyHits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goby.AlignmentTooManyHits)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlignmentTooManyHits::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goby.AlignmentTooManyHits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goby.AmbiguousLocation hits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hits_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->hits(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // required uint32 aligner_threshold = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->aligner_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:goby.AlignmentTooManyHits)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlignmentTooManyHits::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:goby.AlignmentTooManyHits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .goby.AmbiguousLocation hits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hits_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->hits(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // required uint32 aligner_threshold = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->aligner_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goby.AlignmentTooManyHits)
  return target;
}

size_t AlignmentTooManyHits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goby.AlignmentTooManyHits)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 aligner_threshold = 2;
  if (has_aligner_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->aligner_threshold());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .goby.AmbiguousLocation hits = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->hits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->hits(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlignmentTooManyHits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goby.AlignmentTooManyHits)
  GOOGLE_DCHECK_NE(&from, this);
  const AlignmentTooManyHits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlignmentTooManyHits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goby.AlignmentTooManyHits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goby.AlignmentTooManyHits)
    MergeFrom(*source);
  }
}

void AlignmentTooManyHits::MergeFrom(const AlignmentTooManyHits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goby.AlignmentTooManyHits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
  if (from.has_aligner_threshold()) {
    set_aligner_threshold(from.aligner_threshold());
  }
}

void AlignmentTooManyHits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goby.AlignmentTooManyHits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlignmentTooManyHits::CopyFrom(const AlignmentTooManyHits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goby.AlignmentTooManyHits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlignmentTooManyHits::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->hits())) return false;
  return true;
}

void AlignmentTooManyHits::Swap(AlignmentTooManyHits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlignmentTooManyHits::InternalSwap(AlignmentTooManyHits* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&hits_)->InternalSwap(CastToBase(&other->hits_));
  swap(aligner_threshold_, other->aligner_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlignmentTooManyHits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmbiguousLocation::InitAsDefaultInstance() {
}
class AmbiguousLocation::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<AmbiguousLocation>()._has_bits_);
  static void set_has_query_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_at_least_number_of_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length_of_match(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AmbiguousLocation::kQueryIndexFieldNumber;
const int AmbiguousLocation::kAtLeastNumberOfHitsFieldNumber;
const int AmbiguousLocation::kLengthOfMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AmbiguousLocation::AmbiguousLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goby.AmbiguousLocation)
}
AmbiguousLocation::AmbiguousLocation(const AmbiguousLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&query_index_, &from.query_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_of_match_) -
    reinterpret_cast<char*>(&query_index_)) + sizeof(length_of_match_));
  // @@protoc_insertion_point(copy_constructor:goby.AmbiguousLocation)
}

void AmbiguousLocation::SharedCtor() {
  ::memset(&query_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_of_match_) -
      reinterpret_cast<char*>(&query_index_)) + sizeof(length_of_match_));
}

AmbiguousLocation::~AmbiguousLocation() {
  // @@protoc_insertion_point(destructor:goby.AmbiguousLocation)
  SharedDtor();
}

void AmbiguousLocation::SharedDtor() {
}

void AmbiguousLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmbiguousLocation& AmbiguousLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmbiguousLocation_Alignments_2eproto.base);
  return *internal_default_instance();
}


void AmbiguousLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:goby.AmbiguousLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&query_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_of_match_) -
        reinterpret_cast<char*>(&query_index_)) + sizeof(length_of_match_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AmbiguousLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 query_index = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        HasBitSetters::set_has_query_index(&has_bits);
        query_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // required uint32 at_least_number_of_hits = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        HasBitSetters::set_has_at_least_number_of_hits(&has_bits);
        at_least_number_of_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // optional uint32 length_of_match = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        HasBitSetters::set_has_length_of_match(&has_bits);
        length_of_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AmbiguousLocation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:goby.AmbiguousLocation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 query_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_query_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 at_least_number_of_hits = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_at_least_number_of_hits(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &at_least_number_of_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length_of_match = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_length_of_match(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_of_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goby.AmbiguousLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goby.AmbiguousLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AmbiguousLocation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goby.AmbiguousLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 query_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->query_index(), output);
  }

  // required uint32 at_least_number_of_hits = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->at_least_number_of_hits(), output);
  }

  // optional uint32 length_of_match = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->length_of_match(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:goby.AmbiguousLocation)
}

::PROTOBUF_NAMESPACE_ID::uint8* AmbiguousLocation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:goby.AmbiguousLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 query_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->query_index(), target);
  }

  // required uint32 at_least_number_of_hits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->at_least_number_of_hits(), target);
  }

  // optional uint32 length_of_match = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->length_of_match(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goby.AmbiguousLocation)
  return target;
}

size_t AmbiguousLocation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:goby.AmbiguousLocation)
  size_t total_size = 0;

  if (has_query_index()) {
    // required uint32 query_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->query_index());
  }

  if (has_at_least_number_of_hits()) {
    // required uint32 at_least_number_of_hits = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->at_least_number_of_hits());
  }

  return total_size;
}
size_t AmbiguousLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goby.AmbiguousLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 query_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->query_index());

    // required uint32 at_least_number_of_hits = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->at_least_number_of_hits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 length_of_match = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->length_of_match());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmbiguousLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goby.AmbiguousLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const AmbiguousLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmbiguousLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goby.AmbiguousLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goby.AmbiguousLocation)
    MergeFrom(*source);
  }
}

void AmbiguousLocation::MergeFrom(const AmbiguousLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goby.AmbiguousLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      query_index_ = from.query_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      at_least_number_of_hits_ = from.at_least_number_of_hits_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_of_match_ = from.length_of_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AmbiguousLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goby.AmbiguousLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmbiguousLocation::CopyFrom(const AmbiguousLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goby.AmbiguousLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmbiguousLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AmbiguousLocation::Swap(AmbiguousLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmbiguousLocation::InternalSwap(AmbiguousLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(query_index_, other->query_index_);
  swap(at_least_number_of_hits_, other->at_least_number_of_hits_);
  swap(length_of_match_, other->length_of_match_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmbiguousLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlignmentIndex::InitAsDefaultInstance() {
}
class AlignmentIndex::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<AlignmentIndex>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlignmentIndex::kTargetPositionOffsetsFieldNumber;
const int AlignmentIndex::kOffsetsFieldNumber;
const int AlignmentIndex::kAbsolutePositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlignmentIndex::AlignmentIndex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goby.AlignmentIndex)
}
AlignmentIndex::AlignmentIndex(const AlignmentIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      target_position_offsets_(from.target_position_offsets_),
      offsets_(from.offsets_),
      absolute_positions_(from.absolute_positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:goby.AlignmentIndex)
}

void AlignmentIndex::SharedCtor() {
}

AlignmentIndex::~AlignmentIndex() {
  // @@protoc_insertion_point(destructor:goby.AlignmentIndex)
  SharedDtor();
}

void AlignmentIndex::SharedDtor() {
}

void AlignmentIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlignmentIndex& AlignmentIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlignmentIndex_Alignments_2eproto.base);
  return *internal_default_instance();
}


void AlignmentIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:goby.AlignmentIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_position_offsets_.Clear();
  offsets_.Clear();
  absolute_positions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlignmentIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 target_position_offsets = 1 [packed = true];
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_target_position_offsets(), ptr, ctx);
          CHK_(ptr);
          break;
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        while (true) {
          add_target_position_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 8) break;
          ptr += 1;
        }
        break;
      }
      // repeated uint64 offsets = 2 [packed = true];
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_offsets(), ptr, ctx);
          CHK_(ptr);
          break;
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        while (true) {
          add_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 16) break;
          ptr += 1;
        }
        break;
      }
      // repeated uint64 absolute_positions = 3 [packed = true];
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_absolute_positions(), ptr, ctx);
          CHK_(ptr);
          break;
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        while (true) {
          add_absolute_positions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 24) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlignmentIndex::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:goby.AlignmentIndex)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 target_position_offsets = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_target_position_offsets())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_target_position_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 offsets = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_offsets())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 absolute_positions = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_absolute_positions())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_absolute_positions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goby.AlignmentIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goby.AlignmentIndex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlignmentIndex::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goby.AlignmentIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 target_position_offsets = 1 [packed = true];
  if (this->target_position_offsets_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_target_position_offsets_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->target_position_offsets_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->target_position_offsets(i), output);
  }

  // repeated uint64 offsets = 2 [packed = true];
  if (this->offsets_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_offsets_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->offsets_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->offsets(i), output);
  }

  // repeated uint64 absolute_positions = 3 [packed = true];
  if (this->absolute_positions_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_absolute_positions_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->absolute_positions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->absolute_positions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:goby.AlignmentIndex)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlignmentIndex::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:goby.AlignmentIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 target_position_offsets = 1 [packed = true];
  if (this->target_position_offsets_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _target_position_offsets_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->target_position_offsets_, target);
  }

  // repeated uint64 offsets = 2 [packed = true];
  if (this->offsets_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _offsets_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->offsets_, target);
  }

  // repeated uint64 absolute_positions = 3 [packed = true];
  if (this->absolute_positions_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _absolute_positions_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->absolute_positions_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:goby.AlignmentIndex)
  return target;
}

size_t AlignmentIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:goby.AlignmentIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 target_position_offsets = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->target_position_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _target_position_offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 offsets = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 absolute_positions = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->absolute_positions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _absolute_positions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlignmentIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:goby.AlignmentIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const AlignmentIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlignmentIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:goby.AlignmentIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:goby.AlignmentIndex)
    MergeFrom(*source);
  }
}

void AlignmentIndex::MergeFrom(const AlignmentIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goby.AlignmentIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_position_offsets_.MergeFrom(from.target_position_offsets_);
  offsets_.MergeFrom(from.offsets_);
  absolute_positions_.MergeFrom(from.absolute_positions_);
}

void AlignmentIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:goby.AlignmentIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlignmentIndex::CopyFrom(const AlignmentIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goby.AlignmentIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlignmentIndex::IsInitialized() const {
  return true;
}

void AlignmentIndex::Swap(AlignmentIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlignmentIndex::InternalSwap(AlignmentIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_position_offsets_.InternalSwap(&other->target_position_offsets_);
  offsets_.InternalSwap(&other->offsets_);
  absolute_positions_.InternalSwap(&other->absolute_positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlignmentIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace goby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::goby::AlignmentCollection* Arena::CreateMaybeMessage< ::goby::AlignmentCollection >(Arena* arena) {
  return Arena::CreateInternal< ::goby::AlignmentCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::goby::AlignmentEntry* Arena::CreateMaybeMessage< ::goby::AlignmentEntry >(Arena* arena) {
  return Arena::CreateInternal< ::goby::AlignmentEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::goby::RelatedAlignmentEntry* Arena::CreateMaybeMessage< ::goby::RelatedAlignmentEntry >(Arena* arena) {
  return Arena::CreateInternal< ::goby::RelatedAlignmentEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::goby::SequenceVariation* Arena::CreateMaybeMessage< ::goby::SequenceVariation >(Arena* arena) {
  return Arena::CreateInternal< ::goby::SequenceVariation >(arena);
}
template<> PROTOBUF_NOINLINE ::goby::AlignmentHeader* Arena::CreateMaybeMessage< ::goby::AlignmentHeader >(Arena* arena) {
  return Arena::CreateInternal< ::goby::AlignmentHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::goby::IdentifierMapping* Arena::CreateMaybeMessage< ::goby::IdentifierMapping >(Arena* arena) {
  return Arena::CreateInternal< ::goby::IdentifierMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::goby::IdentifierInfo* Arena::CreateMaybeMessage< ::goby::IdentifierInfo >(Arena* arena) {
  return Arena::CreateInternal< ::goby::IdentifierInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::goby::ReadOriginInfo* Arena::CreateMaybeMessage< ::goby::ReadOriginInfo >(Arena* arena) {
  return Arena::CreateInternal< ::goby::ReadOriginInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::goby::AlignmentTooManyHits* Arena::CreateMaybeMessage< ::goby::AlignmentTooManyHits >(Arena* arena) {
  return Arena::CreateInternal< ::goby::AlignmentTooManyHits >(arena);
}
template<> PROTOBUF_NOINLINE ::goby::AmbiguousLocation* Arena::CreateMaybeMessage< ::goby::AmbiguousLocation >(Arena* arena) {
  return Arena::CreateInternal< ::goby::AmbiguousLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::goby::AlignmentIndex* Arena::CreateMaybeMessage< ::goby::AlignmentIndex >(Arena* arena) {
  return Arena::CreateInternal< ::goby::AlignmentIndex >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
